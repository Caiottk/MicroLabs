


ARM Macro Assembler    Page 1 


    1 00000000         ; main.s
    2 00000000         ; Desenvolvido para a placa EK-TM4C1294XL
    3 00000000         ; Prof. Guilherme Peron
    4 00000000         ; Ver 1 19/03/2018
    5 00000000         ; Ver 2 26/08/2018
    6 00000000         ; Este programa deve esperar o usuario pressionar uma ch
                       ave.
    7 00000000         ; Caso o usuario pressione uma chave, um LED deve piscar
                        a cada 1 segundo.
    8 00000000         
    9 00000000         ; ------------------------------------------------------
                       -------------------------
   10 00000000                 THUMB                        ; Instrucaes do tip
                                                            o Thumb-2
   11 00000000         ; ------------------------------------------------------
                       -------------------------
   12 00000000         
   13 00000000         ; Declaracaes EQU - Defines
   14 00000000         ;<NOME>         EQU <VALOR>
   15 00000000         ; ========================
   16 00000000         ; Definicaes de Valores
   17 00000000         
   18 00000000 00000000 
                       NO_BTNS_PRESSED
                               EQU              0
   19 00000000         ; ------------------------------------------------------
                       -------------------------
   20 00000000         ; area de Dados - Declaracaes de variaveis
   21 00000000                 AREA             DATA, ALIGN=2
   22 00000000         ; Se alguma variavel for chamada em outro arquivo
   23 00000000         ;EXPORT  <var> [DATA,SIZE=<tam>]   ; Permite chamar a va
                       riavel <var> a 
   24 00000000         ; partir de outro arquivo
   25 00000000         ;<var> SPACE <tam>                        ; Declara uma 
                       variavel de nome <var>
   26 00000000         ; de <tam> bytes a partir da primeira 
   27 00000000         ; posicao da RAM  
   28 00000000         
   29 00000000 00      sysState
                               SPACE            0x1
   30 00000001 00 00 00 
              00       masterPword
                               SPACE            0x4
   31 00000005 00 00 00 
              00       currPword
                               SPACE            0x4
   32 00000009 00 00 00 
              00       guessPword
                               SPACE            0x4
   33 0000000D 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 2 


              00 00    lcdString
                               SPACE            0x20
   34 0000002D         ; ------------------------------------------------------
                       -------------------------
   35 0000002D         ; area de Cadigo - Tudo abaixo da diretiva a seguir sera
                        armazenado na memaria de 
   36 0000002D         ;                  cadigo
   37 0000002D                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   38 00000000         
   39 00000000         ; Se alguma funcao do arquivo for chamada em outro arqui
                       vo 
   40 00000000                 EXPORT           Start       ; Permite chamar a 
                                                            funcao Start a part
                                                            ir de 
   41 00000000                 EXPORT           checkJ0Interrup 
                                                            ; outro arquivo.
   42 00000000         
   43 00000000         ; Se chamar alguma funcao externa 
   44 00000000         ;IMPORT <func>              ; Permite chamar dentro dest
                       e arquivo uma 
   45 00000000         ; funcao <func>
   46 00000000                 IMPORT           PLL_Init
   47 00000000                 IMPORT           SysTick_Init
   48 00000000                 IMPORT           SysTick_Wait1ms
   49 00000000                 IMPORT           GPIO_Init
   50 00000000         
   51 00000000                 IMPORT           lcd_init
   52 00000000                 IMPORT           printArrayInLcd
   53 00000000                 IMPORT           readKeyboard
   54 00000000                 IMPORT           blinkLEDs
   55 00000000                 IMPORT           reset_LCD
   56 00000000                 IMPORT           pula_cursor_segunda_linha
   57 00000000         
   58 00000000         ; ------------------------------------------------------
                       -------------------------
   59 00000000         ; Funcao main()
   60 00000000         Start
   61 00000000 F7FF FFFE       BL               PLL_Init    ;Chama a subrotina 
                                                            para alterar o cloc
                                                            k do microcontrolad
                                                            or para 80MHz
   62 00000004 F7FF FFFE       BL               SysTick_Init ;Chama a subrotina
                                                             para inicializar o
                                                             SysTick
   63 00000008 F7FF FFFE       BL               GPIO_Init
   64 0000000C F7FF FFFE       BL               lcd_init    ;Chama a subrotina 
                                                            que inicializa os G
                                                            PIO
   65 00000010 F000 F911       BL               InitilizeVars
   66 00000014         ;-------------------------------------------------------
                       -------------------------
   67 00000014         MainLoop
   68 00000014 B500            PUSH{LR}
   69 00000016 F7FF FFFE       BL               reset_LCD   ; Resets LCD before
                                                             next print
   70 0000001A F85D EB04       POP{LR}
   71 0000001E         
   72 0000001E 49BB            LDR              R1, =sysState



ARM Macro Assembler    Page 3 


   73 00000020 7809            LDRB             R1, [R1]
   74 00000022         
   75 00000022 2900            CMP              R1, #0
   76 00000024 BF08            IT               EQ
   77 00000026 F000 F80D       BLEQ             newPword
   78 0000002A         
   79 0000002A 2901            CMP              R1, #1
   80 0000002C BF08            IT               EQ
   81 0000002E F000 F84A       BLEQ             closedSafe
   82 00000032         
   83 00000032 2902            CMP              R1, #2
   84 00000034 BF08            IT               EQ
   85 00000036 F000 F8AD       BLEQ             waitJ0Interrup
   86 0000003A         
   87 0000003A 2903            CMP              R1, #3
   88 0000003C BF08            IT               EQ
   89 0000003E F000 F8B4       BLEQ             waitMasterPword
   90 00000042         
   91 00000042 E7E7            B                MainLoop
   92 00000044         
   93 00000044         ;-------------------------------------------------------
                       -------------------------
   94 00000044         ; Routine for entering a new password and close the safe
                       
   95 00000044         newPword
   96 00000044 48B2            LDR              R0, =MSG_OPEN
   97 00000046 F04F 010C       MOV              R1, #12
   98 0000004A B500            PUSH{LR}
   99 0000004C F7FF FFFE       BL               printArrayInLcd
  100 00000050 F7FF FFFE       BL               pula_cursor_segunda_linha
  101 00000054 48AF            LDR              R0, =guessPword
  102 00000056 4639            MOV              R1, R7
  103 00000058 F101 0101       ADD              R1, R1, #1  ; gessPword[0:(i+1)
                                                            ]
  104 0000005C F7FF FFFE       BL               printArrayInLcd
  105 00000060 F7FF FFFE       BL               readKeyboard
  106 00000064 F85D EB04       POP{LR}
  107 00000068         
  108 00000068 2800            CMP              R0, #NO_BTNS_PRESSED
  109 0000006A BF08            IT               EQ
  110 0000006C E02A            BEQ              newPwordEnd
  111 0000006E         
  112 0000006E 2F04            CMP              R7, #4      ; i == 4
  113 00000070 BF08            IT               EQ
  114 00000072 E000            BEQ              newPwordHashtag
  115 00000074 E020            B                newPwordNewInput
  116 00000076         
  117 00000076         newPwordHashtag
  118 00000076 2823            CMP              R0, #'#'    ; R0 == '#'
  119 00000078 BF18            IT               NE
  120 0000007A E023            BNE              newPwordEnd
  121 0000007C         
  122 0000007C B500            PUSH{LR}
  123 0000007E F44F 707A       MOV              R0, #1000
  124 00000082 F7FF FFFE       BL               SysTick_Wait1ms
  125 00000086         
  126 00000086 B500            PUSH{LR}
  127 00000088 F7FF FFFE       BL               reset_LCD   ; Resets LCD before
                                                             next print



ARM Macro Assembler    Page 4 


  128 0000008C F85D EB04       POP{LR}
  129 00000090         
  130 00000090 48A1            LDR              R0, =MSG_CLOSING
  131 00000092 F04F 010E       MOV              R1, #14
  132 00000096 F7FF FFFE       BL               printArrayInLcd
  133 0000009A         
  134 0000009A F241 3088       MOV              R0, #5000
  135 0000009E F7FF FFFE       BL               SysTick_Wait1ms
  136 000000A2         
  137 000000A2 F04F 0700       MOV              R7, #0      ; i = 0
  138 000000A6 F04F 0600       MOV              R6, #0      ; errorCtr = 0
  139 000000AA 4998            LDR              R1, =sysState
  140 000000AC F04F 0001       MOV              R0, #1
  141 000000B0 7008            STRB             R0, [R1]
  142 000000B2 F85D EB04       POP{LR}
  143 000000B6         
  144 000000B6 E005            B                newPwordEnd
  145 000000B8         
  146 000000B8         newPwordNewInput
  147 000000B8 4998            LDR              R1, =currPword
  148 000000BA 4439            ADD              R1, R1, R7
  149 000000BC 7008            STRB             R0, [R1]    ; currPword[i] = R0
                                                            
  150 000000BE F107 0701       ADD              R7, R7, #1  ; i++
  151 000000C2 E7FF            B                newPwordEnd
  152 000000C4         
  153 000000C4         newPwordEnd
  154 000000C4 4770            BX               LR
  155 000000C6         
  156 000000C6         ;-------------------------------------------------------
                       -------------------------
  157 000000C6         ; Routine for when the safe is closed: either opens or l
                       ocks permanently
  158 000000C6         closedSafe
  159 000000C6 4896            LDR              R0, =MSG_CLOSED
  160 000000C8 F04F 010E       MOV              R1, #14
  161 000000CC B500            PUSH{LR}
  162 000000CE F7FF FFFE       BL               printArrayInLcd
  163 000000D2 F7FF FFFE       BL               pula_cursor_segunda_linha
  164 000000D6 488F            LDR              R0, =guessPword
  165 000000D8 4639            MOV              R1, R7
  166 000000DA F101 0101       ADD              R1, R1, #1  ; gessPword[0:(i+1)
                                                            ]
  167 000000DE F7FF FFFE       BL               printArrayInLcd
  168 000000E2 F7FF FFFE       BL               readKeyboard
  169 000000E6 F85D EB04       POP{LR}
  170 000000EA         
  171 000000EA 2800            CMP              R0, #NO_BTNS_PRESSED
  172 000000EC BF08            IT               EQ
  173 000000EE E050            BEQ              closedSafeEnd
  174 000000F0         
  175 000000F0 2F04            CMP              R7, #4      ; i == 4
  176 000000F2 BF08            IT               EQ
  177 000000F4 E000            BEQ              closedSafeHashtag
  178 000000F6 E046            B                closedSafeNewInput
  179 000000F8         
  180 000000F8         closedSafeHashtag
  181 000000F8 2823            CMP              R0, #'#'    ; R0 == '#'
  182 000000FA BF18            IT               NE



ARM Macro Assembler    Page 5 


  183 000000FC E049            BNE              closedSafeEnd
  184 000000FE         
  185 000000FE 4887            LDR              R0, =currPword
  186 00000100 4984            LDR              R1, =guessPword
  187 00000102 F04F 0204       MOV              R2, #4
  188 00000106 B500            PUSH{LR}
  189 00000108 F000 F8B0       BL               arraysCmp
  190 0000010C F85D EB04       POP{LR}
  191 00000110         
  192 00000110 2801            CMP              R0, #1
  193 00000112 BF1A            ITTE             NE
  194 00000114 2700            MOVNE            R7, #0      ; i = 0
  195 00000116 1C76            ADDNE            R6, R6, #1  ; errorCtr++
  196 00000118 E003            BEQ              closedSafeOpenSafe
  197 0000011A         
  198 0000011A 2E03            CMP              R6, #3      ; errorCtr == 3
  199 0000011C BF08            IT               EQ
  200 0000011E E017            BEQ              closedSafeLockSafe
  201 00000120         
  202 00000120 E037            B                closedSafeEnd
  203 00000122         
  204 00000122         closedSafeOpenSafe
  205 00000122 B500            PUSH{LR}
  206 00000124 F7FF FFFE       BL               reset_LCD   ; Resets LCD before
                                                             next print
  207 00000128         
  208 00000128 487E            LDR              R0, =MSG_OPENING
  209 0000012A F04F 010D       MOV              R1, #13
  210 0000012E F7FF FFFE       BL               printArrayInLcd
  211 00000132         
  212 00000132 F241 3088       MOV              R0, #5000
  213 00000136 F7FF FFFE       BL               SysTick_Wait1ms
  214 0000013A         
  215 0000013A F04F 0700       MOV              R7, #0      ; i = 0
  216 0000013E F04F 0600       MOV              R6, #0      ; errorCtr = 0
  217 00000142 4972            LDR              R1, =sysState
  218 00000144 F04F 0000       MOV              R0, #0
  219 00000148 7008            STRB             R0, [R1]
  220 0000014A F85D EB04       POP{LR}
  221 0000014E         
  222 0000014E E020            B                closedSafeEnd
  223 00000150         
  224 00000150         closedSafeLockSafe
  225 00000150 B500            PUSH{LR}
  226 00000152 F7FF FFFE       BL               reset_LCD   ; Resets LCD before
                                                             next print
  227 00000156         
  228 00000156 4874            LDR              R0, =MSG_LOCKED
  229 00000158 F04F 010E       MOV              R1, #14
  230 0000015C F7FF FFFE       BL               printArrayInLcd
  231 00000160         
  232 00000160 F241 3088       MOV              R0, #5000
  233 00000164 F7FF FFFE       BL               SysTick_Wait1ms
  234 00000168         
  235 00000168 F04F 0700       MOV              R7, #0      ; i = 0
  236 0000016C F04F 0600       MOV              R6, #0      ; errorCtr = 0
  237 00000170 F04F 0300       MOV              R3, #0
  238 00000174 4967            LDR              R1, =guessPword
  239 00000176 600B            STR              R3, [R1]



ARM Macro Assembler    Page 6 


  240 00000178 4964            LDR              R1, =sysState
  241 0000017A F04F 0002       MOV              R0, #2
  242 0000017E 7008            STRB             R0, [R1]
  243 00000180 F85D EB04       POP{LR}
  244 00000184         
  245 00000184 E005            B                closedSafeEnd
  246 00000186         
  247 00000186         closedSafeNewInput
  248 00000186 4963            LDR              R1, =guessPword
  249 00000188 4439            ADD              R1, R1, R7
  250 0000018A 7008            STRB             R0, [R1]    ; guessPword[i] = R
                                                            0
  251 0000018C F107 0701       ADD              R7, R7, #1  ; i++
  252 00000190         
  253 00000190 E7FF            B                closedSafeEnd
  254 00000192         
  255 00000192         closedSafeEnd
  256 00000192 4770            BX               LR
  257 00000194         
  258 00000194         ;-------------------------------------------------------
                       -------------------------
  259 00000194         ; Routine that waits for a interruption and disables all
                        other funcions
  260 00000194         waitJ0Interrup
  261 00000194 4864            LDR              R0, =MSG_LOCKED
  262 00000196 F04F 010E       MOV              R1, #14
  263 0000019A B500            PUSH{LR}
  264 0000019C F7FF FFFE       BL               printArrayInLcd
  265 000001A0 F000 F87A       BL               Atualiza_LEDs
  266 000001A4 F85D EB04       POP{LR}
  267 000001A8         
  268 000001A8 4770            BX               LR
  269 000001AA         
  270 000001AA         ;-------------------------------------------------------
                       -------------------------
  271 000001AA         ; Routine to check if the master password was correctly 
                       written
  272 000001AA         waitMasterPword
  273 000001AA 485F            LDR              R0, =MSG_LOCKED
  274 000001AC F04F 010E       MOV              R1, #14
  275 000001B0 B500            PUSH{LR}
  276 000001B2 F7FF FFFE       BL               printArrayInLcd
  277 000001B6 F7FF FFFE       BL               pula_cursor_segunda_linha
  278 000001BA 4856            LDR              R0, =guessPword
  279 000001BC 4639            MOV              R1, R7
  280 000001BE F101 0101       ADD              R1, R1, #1  ; gessPword[0:(i+1)
                                                            ]
  281 000001C2 F7FF FFFE       BL               printArrayInLcd
  282 000001C6 F7FF FFFE       BL               readKeyboard
  283 000001CA F85D EB04       POP{LR}
  284 000001CE         
  285 000001CE 2800            CMP              R0, #NO_BTNS_PRESSED
  286 000001D0 BF08            IT               EQ
  287 000001D2 E02F            BEQ              waitMasterPwordEnd
  288 000001D4         
  289 000001D4 2F04            CMP              R7, #4      ; i == 4
  290 000001D6 BF08            IT               EQ
  291 000001D8 E000            BEQ              waitMasterPwordHashtag
  292 000001DA E025            B                waitMasterPwordNewInput



ARM Macro Assembler    Page 7 


  293 000001DC         
  294 000001DC         waitMasterPwordHashtag
  295 000001DC 2823            CMP              R0, #'#'    ; R0 == '#'
  296 000001DE BF18            IT               NE
  297 000001E0 E028            BNE              waitMasterPwordEnd
  298 000001E2         
  299 000001E2 4854            LDR              R0, =masterPword
  300 000001E4 494B            LDR              R1, =guessPword
  301 000001E6 F04F 0204       MOV              R2, #4
  302 000001EA B500            PUSH{LR}
  303 000001EC F000 F83E       BL               arraysCmp
  304 000001F0 F85D EB04       POP{LR}
  305 000001F4         
  306 000001F4 2801            CMP              R0, #1
  307 000001F6 BF14            ITE              NE
  308 000001F8 2700            MOVNE            R7, #0      ; i = 0
  309 000001FA E000            BEQ              waitMasterPwordOpenSafe
  310 000001FC         
  311 000001FC E01A            B                waitMasterPwordEnd
  312 000001FE         
  313 000001FE         waitMasterPwordOpenSafe
  314 000001FE B500            PUSH{LR}
  315 00000200 F7FF FFFE       BL               reset_LCD   ; Resets LCD before
                                                             next print
  316 00000204         
  317 00000204 4847            LDR              R0, =MSG_OPENING
  318 00000206 F04F 010D       MOV              R1, #13
  319 0000020A F7FF FFFE       BL               printArrayInLcd
  320 0000020E         
  321 0000020E F241 3088       MOV              R0, #5000
  322 00000212 F7FF FFFE       BL               SysTick_Wait1ms
  323 00000216 F85D EB04       POP{LR}
  324 0000021A         
  325 0000021A F04F 0700       MOV              R7, #0      ; i = 0
  326 0000021E 493B            LDR              R1, =sysState
  327 00000220 F04F 0000       MOV              R0, #0
  328 00000224 7008            STRB             R0, [R1]
  329 00000226         
  330 00000226 E005            B                waitMasterPwordEnd
  331 00000228         
  332 00000228         waitMasterPwordNewInput
  333 00000228 493A            LDR              R1, =guessPword
  334 0000022A 4439            ADD              R1, R1, R7
  335 0000022C 7008            STRB             R0, [R1]    ; guessPword[i] = R
                                                            0
  336 0000022E F107 0701       ADD              R7, R7, #1  ; i++
  337 00000232         
  338 00000232 E7FF            B                waitMasterPwordEnd
  339 00000234         
  340 00000234         waitMasterPwordEnd
  341 00000234 4770            BX               LR
  342 00000236         
  343 00000236         ;-------------------------------------------------------
                       -------------------------
  344 00000236         ; Initializes variables before the main loop
  345 00000236         InitilizeVars
  346 00000236 493F            LDR              R1, =masterPword
  347 00000238 F243 4231       MOV              R2, #0x3431
  348 0000023C F2C3 2237       MOVT             R2, #0x3237



ARM Macro Assembler    Page 8 


  349 00000240 600A            STR              R2, [R1]
  350 00000242         
  351 00000242 F04F 0200       MOV              R2, #0
  352 00000246 4931            LDR              R1, =sysState
  353 00000248 700A            STRB             R2, [R1]
  354 0000024A 4934            LDR              R1, =currPword
  355 0000024C 600A            STR              R2, [R1]
  356 0000024E 4931            LDR              R1, =guessPword
  357 00000250 600A            STR              R2, [R1]
  358 00000252 493A            LDR              R1, =lcdString
  359 00000254 600A            STR              R2, [R1]
  360 00000256         
  361 00000256 F04F 0600       MOV              R6, #0      ; errorCtr
  362 0000025A F04F 0700       MOV              R7, #0      ; Iterator for pass
                                                            words
  363 0000025E F04F 0800       MOV              R8, #0      ; Iterator for LCD
  364 00000262 F04F 0932       MOV              R9, #50
  365 00000266 F04F 0501       MOV              R5, #1      ; blinkLeds input(O
                                                            N/OFF)
  366 0000026A         
  367 0000026A 4770            BX               LR
  368 0000026C         
  369 0000026C         ;-------------------------------------------------------
                       -------------------------
  370 0000026C         ; Verifies if two arrays are equal
  371 0000026C         ; Input:  R0 = array1 starting address
  372 0000026C         ;         R1 = array2 starting address
  373 0000026C         ;    R2 = array size
  374 0000026C         ; Output: R0 = 1 if the arrays are equal, 0 if not
  375 0000026C         arraysCmp
  376 0000026C 2A00            CMP              R2, #0
  377 0000026E BF04            ITT              EQ
  378 00000270 2001            MOVEQ            R0, #1
  379 00000272 E009            BEQ              arraysCmpEnd
  380 00000274         
  381 00000274 F810 3B01       LDRB             R3, [R0], #1
  382 00000278 F811 4B01       LDRB             R4, [R1], #1
  383 0000027C 42A3            CMP              R3, R4
  384 0000027E BF1C            ITT              NE
  385 00000280 2000            MOVNE            R0, #0
  386 00000282 E001            BNE              arraysCmpEnd
  387 00000284         
  388 00000284 1E52            SUBS             R2, R2, #1
  389 00000286 E7F1            B                arraysCmp
  390 00000288         
  391 00000288         arraysCmpEnd
  392 00000288 4770            BX               LR
  393 0000028A         
  394 0000028A         ;-------------------------------------------------------
                       -------------------------
  395 0000028A         ; Verifies if the interruption should change state
  396 0000028A         checkJ0Interrup
  397 0000028A 4820            LDR              R0, =sysState
  398 0000028C 7801            LDRB             R1, [R0]
  399 0000028E 2902            CMP              R1, #2
  400 00000290 BF04            ITT              EQ
  401 00000292 2103            MOVEQ            R1, #3
  402 00000294 7001            STRBEQ           R1, [R0]
  403 00000296         



ARM Macro Assembler    Page 9 


  404 00000296 4770            BX               LR
  405 00000298         
  406 00000298         Atualiza_LEDs
  407 00000298 B500            PUSH             { LR }
  408 0000029A F7FF FFFE       BL               blinkLEDs
  409 0000029E F85D EB04       POP              { LR }
  410 000002A2 F1A9 0901       SUB              R9, #1
  411 000002A6 F1B9 0F00       CMP              R9, #0
  412 000002AA D109            BNE              Atualiza_LEDsEnd
  413 000002AC F04F 0932       MOV              R9, #50
  414 000002B0 F84D 8D04       PUSH             { R8 }
  415 000002B4 F04F 38FF       MOV              R8, #-1
  416 000002B8 FB05 F508       MUL              R5,R8
  417 000002BC F85D 8B04       POP              { R8 }
  418 000002C0         
  419 000002C0         Atualiza_LEDsEnd
  420 000002C0 4770            BX               LR
  421 000002C2         
  422 000002C2         ; ------------------------------------------------------
                       --------------------------------------------------------
                       -----------
  423 000002C2         ; Fim do Arquivo
  424 000002C2         ; ------------------------------------------------------
                       --------------------------------------------------------
                       ----------- 
  425 000002C2         
  426 000002C2 43 6F 66 
              72 65 20 
              41 62 65 
              72 74 6F 
              00       MSG_OPEN
                               DCB              "Cofre Aberto", 0
  427 000002CF 43 6F 66 
              72 65 20 
              41 62 72 
              69 6E 64 
              6F 00    MSG_OPENING
                               DCB              "Cofre Abrindo", 0
  428 000002DD 43 6F 66 
              72 65 20 
              46 65 63 
              68 61 6E 
              64 6F 00 MSG_CLOSING
                               DCB              "Cofre Fechando", 0
  429 000002EC 43 6F 66 
              72 65 20 
              46 65 63 
              68 61 64 
              6F 2E 00 MSG_CLOSED
                               DCB              "Cofre Fechado.", 0
  430 000002FB 43 6F 66 
              72 65 20 
              54 72 61 
              76 61 64 
              6F 2E 00 MSG_LOCKED
                               DCB              "Cofre Travado.", 0
  431 0000030A         
  432 0000030A 00 00           ALIGN                        ;Garante que o fim 
                                                            da secao esta alinh



ARM Macro Assembler    Page 10 


                                                            ada 
  433 0000030C                 END                          ;Fim do arquivo
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931,A1950W --cpu=Cortex-M4.fp.sp 
--depend=.\objects\main.d -o.\objects\main.o -IC:\Users\joaov\AppData\Local\Arm
\Packs\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C129 --predefine="__EVAL SETA 1" -
-predefine="__UVISION_VERSION SETA 538" --predefine="TM4C1294NCPDT SETA 1" --li
st=.\listings\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DATA 00000000

Symbol: DATA
   Definitions
      At line 21 in file main.s
   Uses
      None
Comment: DATA unused
currPword 00000005

Symbol: currPword
   Definitions
      At line 31 in file main.s
   Uses
      At line 147 in file main.s
      At line 185 in file main.s
      At line 354 in file main.s

guessPword 00000009

Symbol: guessPword
   Definitions
      At line 32 in file main.s
   Uses
      At line 101 in file main.s
      At line 164 in file main.s
      At line 186 in file main.s
      At line 238 in file main.s
      At line 248 in file main.s
      At line 278 in file main.s
      At line 300 in file main.s
      At line 333 in file main.s
      At line 356 in file main.s

lcdString 0000000D

Symbol: lcdString
   Definitions
      At line 33 in file main.s
   Uses
      At line 358 in file main.s
Comment: lcdString used once
masterPword 00000001

Symbol: masterPword
   Definitions
      At line 30 in file main.s
   Uses
      At line 299 in file main.s
      At line 346 in file main.s

sysState 00000000

Symbol: sysState
   Definitions
      At line 29 in file main.s
   Uses
      At line 72 in file main.s
      At line 139 in file main.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      At line 217 in file main.s
      At line 240 in file main.s
      At line 326 in file main.s
      At line 352 in file main.s
      At line 397 in file main.s

6 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 37 in file main.s
   Uses
      None
Comment: .text unused
Atualiza_LEDs 00000298

Symbol: Atualiza_LEDs
   Definitions
      At line 406 in file main.s
   Uses
      At line 265 in file main.s
Comment: Atualiza_LEDs used once
Atualiza_LEDsEnd 000002C0

Symbol: Atualiza_LEDsEnd
   Definitions
      At line 419 in file main.s
   Uses
      At line 412 in file main.s
Comment: Atualiza_LEDsEnd used once
InitilizeVars 00000236

Symbol: InitilizeVars
   Definitions
      At line 345 in file main.s
   Uses
      At line 65 in file main.s
Comment: InitilizeVars used once
MSG_CLOSED 000002EC

Symbol: MSG_CLOSED
   Definitions
      At line 429 in file main.s
   Uses
      At line 159 in file main.s
Comment: MSG_CLOSED used once
MSG_CLOSING 000002DD

Symbol: MSG_CLOSING
   Definitions
      At line 428 in file main.s
   Uses
      At line 130 in file main.s
Comment: MSG_CLOSING used once
MSG_LOCKED 000002FB

Symbol: MSG_LOCKED
   Definitions
      At line 430 in file main.s
   Uses
      At line 228 in file main.s
      At line 261 in file main.s
      At line 273 in file main.s

MSG_OPEN 000002C2



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: MSG_OPEN
   Definitions
      At line 426 in file main.s
   Uses
      At line 96 in file main.s
Comment: MSG_OPEN used once
MSG_OPENING 000002CF

Symbol: MSG_OPENING
   Definitions
      At line 427 in file main.s
   Uses
      At line 208 in file main.s
      At line 317 in file main.s

MainLoop 00000014

Symbol: MainLoop
   Definitions
      At line 67 in file main.s
   Uses
      At line 91 in file main.s
Comment: MainLoop used once
Start 00000000

Symbol: Start
   Definitions
      At line 60 in file main.s
   Uses
      At line 40 in file main.s
Comment: Start used once
arraysCmp 0000026C

Symbol: arraysCmp
   Definitions
      At line 375 in file main.s
   Uses
      At line 189 in file main.s
      At line 303 in file main.s
      At line 389 in file main.s

arraysCmpEnd 00000288

Symbol: arraysCmpEnd
   Definitions
      At line 391 in file main.s
   Uses
      At line 379 in file main.s
      At line 386 in file main.s

checkJ0Interrup 0000028A

Symbol: checkJ0Interrup
   Definitions
      At line 396 in file main.s
   Uses
      At line 41 in file main.s
Comment: checkJ0Interrup used once



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

closedSafe 000000C6

Symbol: closedSafe
   Definitions
      At line 158 in file main.s
   Uses
      At line 81 in file main.s
Comment: closedSafe used once
closedSafeEnd 00000192

Symbol: closedSafeEnd
   Definitions
      At line 255 in file main.s
   Uses
      At line 173 in file main.s
      At line 183 in file main.s
      At line 202 in file main.s
      At line 222 in file main.s
      At line 245 in file main.s
      At line 253 in file main.s

closedSafeHashtag 000000F8

Symbol: closedSafeHashtag
   Definitions
      At line 180 in file main.s
   Uses
      At line 177 in file main.s
Comment: closedSafeHashtag used once
closedSafeLockSafe 00000150

Symbol: closedSafeLockSafe
   Definitions
      At line 224 in file main.s
   Uses
      At line 200 in file main.s
Comment: closedSafeLockSafe used once
closedSafeNewInput 00000186

Symbol: closedSafeNewInput
   Definitions
      At line 247 in file main.s
   Uses
      At line 178 in file main.s
Comment: closedSafeNewInput used once
closedSafeOpenSafe 00000122

Symbol: closedSafeOpenSafe
   Definitions
      At line 204 in file main.s
   Uses
      At line 196 in file main.s
Comment: closedSafeOpenSafe used once
newPword 00000044

Symbol: newPword
   Definitions
      At line 95 in file main.s
   Uses



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

      At line 77 in file main.s
Comment: newPword used once
newPwordEnd 000000C4

Symbol: newPwordEnd
   Definitions
      At line 153 in file main.s
   Uses
      At line 110 in file main.s
      At line 120 in file main.s
      At line 144 in file main.s
      At line 151 in file main.s

newPwordHashtag 00000076

Symbol: newPwordHashtag
   Definitions
      At line 117 in file main.s
   Uses
      At line 114 in file main.s
Comment: newPwordHashtag used once
newPwordNewInput 000000B8

Symbol: newPwordNewInput
   Definitions
      At line 146 in file main.s
   Uses
      At line 115 in file main.s
Comment: newPwordNewInput used once
waitJ0Interrup 00000194

Symbol: waitJ0Interrup
   Definitions
      At line 260 in file main.s
   Uses
      At line 85 in file main.s
Comment: waitJ0Interrup used once
waitMasterPword 000001AA

Symbol: waitMasterPword
   Definitions
      At line 272 in file main.s
   Uses
      At line 89 in file main.s
Comment: waitMasterPword used once
waitMasterPwordEnd 00000234

Symbol: waitMasterPwordEnd
   Definitions
      At line 340 in file main.s
   Uses
      At line 287 in file main.s
      At line 297 in file main.s
      At line 311 in file main.s
      At line 330 in file main.s
      At line 338 in file main.s

waitMasterPwordHashtag 000001DC




ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

Symbol: waitMasterPwordHashtag
   Definitions
      At line 294 in file main.s
   Uses
      At line 291 in file main.s
Comment: waitMasterPwordHashtag used once
waitMasterPwordNewInput 00000228

Symbol: waitMasterPwordNewInput
   Definitions
      At line 332 in file main.s
   Uses
      At line 292 in file main.s
Comment: waitMasterPwordNewInput used once
waitMasterPwordOpenSafe 000001FE

Symbol: waitMasterPwordOpenSafe
   Definitions
      At line 313 in file main.s
   Uses
      At line 309 in file main.s
Comment: waitMasterPwordOpenSafe used once
30 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NO_BTNS_PRESSED 00000000

Symbol: NO_BTNS_PRESSED
   Definitions
      At line 18 in file main.s
   Uses
      At line 108 in file main.s
      At line 171 in file main.s
      At line 285 in file main.s

1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

GPIO_Init 00000000

Symbol: GPIO_Init
   Definitions
      At line 49 in file main.s
   Uses
      At line 63 in file main.s
Comment: GPIO_Init used once
PLL_Init 00000000

Symbol: PLL_Init
   Definitions
      At line 46 in file main.s
   Uses
      At line 61 in file main.s
Comment: PLL_Init used once
SysTick_Init 00000000

Symbol: SysTick_Init
   Definitions
      At line 47 in file main.s
   Uses
      At line 62 in file main.s
Comment: SysTick_Init used once
SysTick_Wait1ms 00000000

Symbol: SysTick_Wait1ms
   Definitions
      At line 48 in file main.s
   Uses
      At line 124 in file main.s
      At line 135 in file main.s
      At line 213 in file main.s
      At line 233 in file main.s
      At line 322 in file main.s

blinkLEDs 00000000

Symbol: blinkLEDs
   Definitions
      At line 54 in file main.s
   Uses
      At line 408 in file main.s
Comment: blinkLEDs used once
lcd_init 00000000

Symbol: lcd_init
   Definitions
      At line 51 in file main.s
   Uses
      At line 64 in file main.s
Comment: lcd_init used once
printArrayInLcd 00000000

Symbol: printArrayInLcd
   Definitions
      At line 52 in file main.s
   Uses
      At line 99 in file main.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

      At line 104 in file main.s
      At line 132 in file main.s
      At line 162 in file main.s
      At line 167 in file main.s
      At line 210 in file main.s
      At line 230 in file main.s
      At line 264 in file main.s
      At line 276 in file main.s
      At line 281 in file main.s
      At line 319 in file main.s

pula_cursor_segunda_linha 00000000

Symbol: pula_cursor_segunda_linha
   Definitions
      At line 56 in file main.s
   Uses
      At line 100 in file main.s
      At line 163 in file main.s
      At line 277 in file main.s

readKeyboard 00000000

Symbol: readKeyboard
   Definitions
      At line 53 in file main.s
   Uses
      At line 105 in file main.s
      At line 168 in file main.s
      At line 282 in file main.s

reset_LCD 00000000

Symbol: reset_LCD
   Definitions
      At line 55 in file main.s
   Uses
      At line 69 in file main.s
      At line 127 in file main.s
      At line 206 in file main.s
      At line 226 in file main.s
      At line 315 in file main.s

10 symbols
383 symbols in table
