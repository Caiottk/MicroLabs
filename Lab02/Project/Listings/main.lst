


ARM Macro Assembler    Page 1 


    1 00000000         ; main.s
    2 00000000         ; Desenvolvido para a placa EK-TM4C1294XL
    3 00000000         ; Prof. Guilherme Peron
    4 00000000         ; Ver 1 19/03/2018
    5 00000000         ; Ver 2 26/08/2018
    6 00000000         ; Este programa deve esperar o usuario pressionar uma ch
                       ave.
    7 00000000         ; Caso o usuario pressione uma chave, um LED deve piscar
                        a cada 1 segundo.
    8 00000000         
    9 00000000         ; ------------------------------------------------------
                       -------------------------
   10 00000000                 THUMB                        ; Instrucaes do tip
                                                            o Thumb-2
   11 00000000         ; ------------------------------------------------------
                       -------------------------
   12 00000000         
   13 00000000         ; Declaracaes EQU - Defines
   14 00000000         ;<NOME>         EQU <VALOR>
   15 00000000         ; ========================
   16 00000000         ; Definicaes de Valores
   17 00000000         
   18 00000000 00000000 
                       NO_BTNS_PRESSED
                               EQU              0
   19 00000000         ; ------------------------------------------------------
                       -------------------------
   20 00000000         ; area de Dados - Declaracaes de variaveis
   21 00000000                 AREA             DATA, ALIGN=2
   22 00000000         ; Se alguma variavel for chamada em outro arquivo
   23 00000000         ;EXPORT  <var> [DATA,SIZE=<tam>]   ; Permite chamar a va
                       riavel <var> a 
   24 00000000         ; partir de outro arquivo
   25 00000000         ;<var> SPACE <tam>                        ; Declara uma 
                       variavel de nome <var>
   26 00000000         ; de <tam> bytes a partir da primeira 
   27 00000000         ; posicao da RAM  
   28 00000000         
   29 00000000 00      sysState
                               SPACE            0x1
   30 00000001 00 00 00 
              00       masterPword
                               SPACE            0x4
   31 00000005 00 00 00 
              00       currPword
                               SPACE            0x4
   32 00000009 00 00 00 
              00       guessPword
                               SPACE            0x4
   33 0000000D 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 2 


              00 00    lcdString
                               SPACE            0x20
   34 0000002D         ; ------------------------------------------------------
                       -------------------------
   35 0000002D         ; area de Cadigo - Tudo abaixo da diretiva a seguir sera
                        armazenado na memaria de 
   36 0000002D         ;                  cadigo
   37 0000002D                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   38 00000000         
   39 00000000         ; Se alguma funcao do arquivo for chamada em outro arqui
                       vo 
   40 00000000                 EXPORT           Start       ; Permite chamar a 
                                                            funcao Start a part
                                                            ir de 
   41 00000000         ; outro arquivo. No caso startup.s
   42 00000000         
   43 00000000         ; Se chamar alguma funcao externa 
   44 00000000         ;IMPORT <func>              ; Permite chamar dentro dest
                       e arquivo uma 
   45 00000000         ; funcao <func>
   46 00000000                 IMPORT           PLL_Init
   47 00000000                 IMPORT           SysTick_Init
   48 00000000                 IMPORT           SysTick_Wait1ms
   49 00000000                 IMPORT           GPIO_Init
   50 00000000         
   51 00000000                 IMPORT           lcd_init
   52 00000000                 IMPORT           printArrayInLcd
   53 00000000                 IMPORT           readKeyboard
   54 00000000                 IMPORT           blinkLEDs
   55 00000000                 IMPORT           escrever_caractere_senha
   56 00000000         
   57 00000000         ; ------------------------------------------------------
                       -------------------------
   58 00000000         ; Funcao main()
   59 00000000         Start
   60 00000000 F7FF FFFE       BL               PLL_Init    ;Chama a subrotina 
                                                            para alterar o cloc
                                                            k do microcontrolad
                                                            or para 80MHz
   61 00000004 F7FF FFFE       BL               SysTick_Init ;Chama a subrotina
                                                             para inicializar o
                                                             SysTick
   62 00000008 F7FF FFFE       BL               GPIO_Init
   63 0000000C F7FF FFFE       BL               lcd_init    ;Chama a subrotina 
                                                            que inicializa os G
                                                            PIO
   64 00000010 F000 F8E1       BL               InitilizeVars
   65 00000014         ;-------------------------------------------------------
                       -------------------------
   66 00000014         MainLoop
   67 00000014 49A4            LDR              R1, =sysState
   68 00000016 6809            LDR              R1, [R1]
   69 00000018         
   70 00000018 2900            CMP              R1, #0
   71 0000001A BF08            IT               EQ
   72 0000001C F000 F80D       BLEQ             newPword
   73 00000020         
   74 00000020 2901            CMP              R1, #1



ARM Macro Assembler    Page 3 


   75 00000022 BF08            IT               EQ
   76 00000024 F000 F842       BLEQ             closedSafe
   77 00000028         
   78 00000028 2902            CMP              R1, #2
   79 0000002A BF08            IT               EQ
   80 0000002C F000 F898       BLEQ             waitJ0Interrup
   81 00000030         
   82 00000030 2901            CMP              R1, #1
   83 00000032 BF08            IT               EQ
   84 00000034 F000 F89F       BLEQ             waitMasterPword
   85 00000038         
   86 00000038 E7EC            B                MainLoop
   87 0000003A         
   88 0000003A         ;-------------------------------------------------------
                       -------------------------
   89 0000003A         ; Routine for entering a new password and close the safe
                       
   90 0000003A         newPword
   91 0000003A 489C            LDR              R0, =MSG_OPEN
   92 0000003C F04F 011F       MOV              R1, #31
   93 00000040 B500            PUSH{LR}
   94 00000042 F7FF FFFE       BL               printArrayInLcd
   95 00000046 F7FF FFFE       BL               readKeyboard
   96 0000004A F85D EB04       POP{LR}
   97 0000004E         
   98 0000004E 2800            CMP              R0, #NO_BTNS_PRESSED
   99 00000050 BF08            IT               EQ
  100 00000052 E02A            BEQ              newPwordEnd
  101 00000054         
  102 00000054 2F04            CMP              R7, #4      ; i == 4
  103 00000056 BF08            IT               EQ
  104 00000058 E000            BEQ              newPwordHashtag
  105 0000005A E01B            B                newPwordNewInput
  106 0000005C         
  107 0000005C         newPwordHashtag
  108 0000005C 2823            CMP              R0, #0x23   ; R0 == '#'
  109 0000005E BF18            IT               NE
  110 00000060 E023            BNE              newPwordEnd
  111 00000062         
  112 00000062 B500            PUSH{LR}
  113 00000064 F44F 707A       MOV              R0, #1000
  114 00000068 F7FF FFFE       BL               SysTick_Wait1ms
  115 0000006C         
  116 0000006C 4890            LDR              R0, =MSG_CLOSING
  117 0000006E F04F 0111       MOV              R1, #17
  118 00000072 F7FF FFFE       BL               printArrayInLcd
  119 00000076         
  120 00000076 F241 3088       MOV              R0, #5000
  121 0000007A F7FF FFFE       BL               SysTick_Wait1ms
  122 0000007E         
  123 0000007E F04F 0700       MOV              R7, #0      ; i = 0
  124 00000082 F04F 0600       MOV              R6, #0      ; errorCtr = 0
  125 00000086 4988            LDR              R1, =sysState
  126 00000088 F04F 0001       MOV              R0, #1
  127 0000008C 7008            STRB             R0, [R1]
  128 0000008E F85D EB04       POP{LR}
  129 00000092         
  130 00000092 E00A            B                newPwordEnd
  131 00000094         



ARM Macro Assembler    Page 4 


  132 00000094         newPwordNewInput
  133 00000094 4987            LDR              R1, =currPword
  134 00000096 4439            ADD              R1, R1, R7
  135 00000098 7008            STRB             R0, [R1]    ; currPword[i] = R0
                                                            
  136 0000009A F107 0701       ADD              R7, R7, #1  ; i++
  137 0000009E B500            PUSH             {LR}
  138 000000A0 F7FF FFFE       BL               escrever_caractere_senha
  139 000000A4 F85D EB04       POP              {LR}
  140 000000A8 E7FF            B                newPwordEnd
  141 000000AA         
  142 000000AA         newPwordEnd
  143 000000AA 4770            BX               LR
  144 000000AC         
  145 000000AC         ;-------------------------------------------------------
                       -------------------------
  146 000000AC         ; Routine for when the safe is closed: either opens or l
                       ocks permanently
  147 000000AC         closedSafe
  148 000000AC 4882            LDR              R0, =MSG_CLOSED
  149 000000AE F04F 010D       MOV              R1, #13
  150 000000B2 B500            PUSH{LR}
  151 000000B4 F7FF FFFE       BL               printArrayInLcd
  152 000000B8 F7FF FFFE       BL               readKeyboard
  153 000000BC F85D EB04       POP{LR}
  154 000000C0         
  155 000000C0 2800            CMP              R0, #NO_BTNS_PRESSED
  156 000000C2 BF08            IT               EQ
  157 000000C4 E04B            BEQ              closedSafeEnd
  158 000000C6         
  159 000000C6 2F04            CMP              R7, #4      ; i == 4
  160 000000C8 BF08            IT               EQ
  161 000000CA E000            BEQ              closedSafeHashtag
  162 000000CC E041            B                closedSafeNewInput
  163 000000CE         
  164 000000CE         closedSafeHashtag
  165 000000CE 2823            CMP              R0, #0x23   ; R0 == '#'
  166 000000D0 BF18            IT               NE
  167 000000D2 E044            BNE              closedSafeEnd
  168 000000D4         
  169 000000D4 4877            LDR              R0, =currPword
  170 000000D6 4979            LDR              R1, =guessPword
  171 000000D8 F04F 0204       MOV              R2, #4
  172 000000DC B500            PUSH{LR}
  173 000000DE F000 F893       BL               arraysCmp
  174 000000E2 F85D EB04       POP{LR}
  175 000000E6         
  176 000000E6 2801            CMP              R0, #1
  177 000000E8 BF1A            ITTE             NE
  178 000000EA 2700            MOVNE            R7, #0      ; i = 0
  179 000000EC 1C76            ADDNE            R6, R6, #1  ; errorCtr++
  180 000000EE E003            BEQ              closedSafeOpenSafe
  181 000000F0         
  182 000000F0 2E03            CMP              R6, #3      ; errorCtr == 3
  183 000000F2 BF08            IT               EQ
  184 000000F4 E014            BEQ              closedSafeLockSafe
  185 000000F6         
  186 000000F6 E032            B                closedSafeEnd
  187 000000F8         



ARM Macro Assembler    Page 5 


  188 000000F8         closedSafeOpenSafe
  189 000000F8 B500            PUSH{LR}
  190 000000FA 4871            LDR              R0, =MSG_OPENING
  191 000000FC F04F 0110       MOV              R1, #16
  192 00000100 F7FF FFFE       BL               printArrayInLcd
  193 00000104         
  194 00000104 F241 3088       MOV              R0, #5000
  195 00000108 F7FF FFFE       BL               SysTick_Wait1ms
  196 0000010C         
  197 0000010C F04F 0700       MOV              R7, #0      ; i = 0
  198 00000110 F04F 0600       MOV              R6, #0      ; errorCtr = 0
  199 00000114 4964            LDR              R1, =sysState
  200 00000116 F04F 0000       MOV              R0, #0
  201 0000011A 7008            STRB             R0, [R1]
  202 0000011C F85D EB04       POP{LR}
  203 00000120         
  204 00000120         closedSafeLockSafe
  205 00000120 B500            PUSH{LR}
  206 00000122 4868            LDR              R0, =MSG_LOCKED
  207 00000124 F04F 010E       MOV              R1, #14
  208 00000128 F7FF FFFE       BL               printArrayInLcd
  209 0000012C         
  210 0000012C F241 3088       MOV              R0, #5000
  211 00000130 F7FF FFFE       BL               SysTick_Wait1ms
  212 00000134         
  213 00000134 F04F 0700       MOV              R7, #0      ; i = 0
  214 00000138 F04F 0600       MOV              R6, #0      ; errorCtr = 0
  215 0000013C F04F 0300       MOV              R3, #0
  216 00000140 495E            LDR              R1, =guessPword
  217 00000142 600B            STR              R3, [R1]
  218 00000144 4958            LDR              R1, =sysState
  219 00000146 F04F 0002       MOV              R0, #2
  220 0000014A 7008            STRB             R0, [R1]
  221 0000014C F85D EB04       POP{LR}
  222 00000150         
  223 00000150 E005            B                closedSafeEnd
  224 00000152         
  225 00000152         closedSafeNewInput
  226 00000152 495A            LDR              R1, =guessPword
  227 00000154 4439            ADD              R1, R1, R7
  228 00000156 7008            STRB             R0, [R1]    ; guessPword[i] = R
                                                            0
  229 00000158 F107 0701       ADD              R7, R7, #1  ; i++
  230 0000015C         
  231 0000015C E7FF            B                closedSafeEnd
  232 0000015E         
  233 0000015E         closedSafeEnd
  234 0000015E 4770            BX               LR
  235 00000160         
  236 00000160         ;-------------------------------------------------------
                       -------------------------
  237 00000160         ; Routine that waits for a interruption and disables all
                        other funcions
  238 00000160         waitJ0Interrup
  239 00000160 4858            LDR              R0, =MSG_LOCKED
  240 00000162 F04F 010E       MOV              R1, #14
  241 00000166 B500            PUSH{LR}
  242 00000168 F7FF FFFE       BL               printArrayInLcd
  243 0000016C F000 F862       BL               Atualiza_LEDs



ARM Macro Assembler    Page 6 


  244 00000170 F85D EB04       POP{LR}
  245 00000174         
  246 00000174 4770            BX               LR
  247 00000176         
  248 00000176         ;-------------------------------------------------------
                       -------------------------
  249 00000176         ; Routine to check if the master password was correctly 
                       written
  250 00000176         waitMasterPword
  251 00000176 4853            LDR              R0, =MSG_LOCKED
  252 00000178 F04F 010E       MOV              R1, #14
  253 0000017C B500            PUSH{LR}
  254 0000017E F7FF FFFE       BL               printArrayInLcd
  255 00000182 F7FF FFFE       BL               readKeyboard
  256 00000186 F85D EB04       POP{LR}
  257 0000018A         
  258 0000018A 2800            CMP              R0, #NO_BTNS_PRESSED
  259 0000018C BF08            IT               EQ
  260 0000018E E021            BEQ              waitMasterPwordEnd
  261 00000190         
  262 00000190 2F04            CMP              R7, #4      ; i == 4
  263 00000192 BF08            IT               EQ
  264 00000194 E000            BEQ              waitMasterPwordHashtag
  265 00000196 E017            B                waitMasterPwordNewInput
  266 00000198         
  267 00000198         waitMasterPwordHashtag
  268 00000198 2823            CMP              R0, #0x23   ; R0 == '#'
  269 0000019A BF18            IT               NE
  270 0000019C E01A            BNE              waitMasterPwordEnd
  271 0000019E         
  272 0000019E 484C            LDR              R0, =masterPword
  273 000001A0 4946            LDR              R1, =guessPword
  274 000001A2 F04F 0204       MOV              R2, #4
  275 000001A6 B500            PUSH{LR}
  276 000001A8 F000 F82E       BL               arraysCmp
  277 000001AC F85D EB04       POP{LR}
  278 000001B0         
  279 000001B0 2801            CMP              R0, #1
  280 000001B2 BF14            ITE              NE
  281 000001B4 2700            MOVNE            R7, #0      ; i = 0
  282 000001B6 E000            BEQ              waitMasterPwordOpenSafe
  283 000001B8         
  284 000001B8 E00C            B                waitMasterPwordEnd
  285 000001BA         
  286 000001BA         waitMasterPwordOpenSafe
  287 000001BA F04F 0700       MOV              R7, #0      ; i = 0
  288 000001BE 493A            LDR              R1, =sysState
  289 000001C0 F04F 0000       MOV              R0, #0
  290 000001C4 7008            STRB             R0, [R1]
  291 000001C6         
  292 000001C6 E005            B                waitMasterPwordEnd
  293 000001C8         
  294 000001C8         waitMasterPwordNewInput
  295 000001C8 493C            LDR              R1, =guessPword
  296 000001CA 4439            ADD              R1, R1, R7
  297 000001CC 7008            STRB             R0, [R1]    ; guessPword[i] = R
                                                            0
  298 000001CE F107 0701       ADD              R7, R7, #1  ; i++
  299 000001D2         



ARM Macro Assembler    Page 7 


  300 000001D2 E7FF            B                waitMasterPwordEnd
  301 000001D4         
  302 000001D4         waitMasterPwordEnd
  303 000001D4 4770            BX               LR
  304 000001D6         
  305 000001D6         ;-------------------------------------------------------
                       -------------------------
  306 000001D6         ; Initializes variables before the main loop
  307 000001D6         InitilizeVars
  308 000001D6 493E            LDR              R1, =masterPword
  309 000001D8 F44F 7241       MOV              R2, #0x0304
  310 000001DC F2C0 1202       MOVT             R2, #0x0102
  311 000001E0 600A            STR              R2, [R1]
  312 000001E2         
  313 000001E2 F04F 0200       MOV              R2, #0
  314 000001E6 4930            LDR              R1, =sysState
  315 000001E8 600A            STR              R2, [R1]
  316 000001EA 4932            LDR              R1, =currPword
  317 000001EC 600A            STR              R2, [R1]
  318 000001EE 4933            LDR              R1, =guessPword
  319 000001F0 600A            STR              R2, [R1]
  320 000001F2 4938            LDR              R1, =lcdString
  321 000001F4 600A            STR              R2, [R1]
  322 000001F6         
  323 000001F6 F04F 0700       MOV              R7, #0      ; Iterator for pass
                                                            words
  324 000001FA F04F 0800       MOV              R8, #0      ; Iterator for LCD
  325 000001FE F04F 0932       MOV              R9, #50
  326 00000202 F04F 0501       MOV              R5, #1      ; blinkLeds input(O
                                                            N/OFF)
  327 00000206         
  328 00000206         
  329 00000206 4770            BX               LR
  330 00000208         
  331 00000208         ;-------------------------------------------------------
                       -------------------------
  332 00000208         ; Verifies if two arrays are equal
  333 00000208         ; Input:  R0 = array1 starting address
  334 00000208         ;         R1 = array2 starting address
  335 00000208         ;    R2 = array size
  336 00000208         ; Output: R0 = 1 if the arrays are equal, 0 if not
  337 00000208         arraysCmp
  338 00000208 2A00            CMP              R2, #0
  339 0000020A BF04            ITT              EQ
  340 0000020C 2001            MOVEQ            R0, #1
  341 0000020E E009            BEQ              arraysCmpEnd
  342 00000210         
  343 00000210 F810 3B01       LDRB             R3, [R0], #1
  344 00000214 F811 4B01       LDRB             R4, [R1], #1
  345 00000218 42A3            CMP              R3, R4
  346 0000021A BF1C            ITT              NE
  347 0000021C 2000            MOVNE            R0, #0
  348 0000021E E001            BNE              arraysCmpEnd
  349 00000220         
  350 00000220 1E52            SUBS             R2, R2, #1
  351 00000222 E7F1            B                arraysCmp
  352 00000224         
  353 00000224         arraysCmpEnd
  354 00000224 4770            BX               LR



ARM Macro Assembler    Page 8 


  355 00000226         
  356 00000226         ;-------------------------------------------------------
                       -------------------------
  357 00000226         ; Verifies if the interruption should change state
  358 00000226         checkJ0Interrup
  359 00000226 4820            LDR              R0, =sysState
  360 00000228 7801            LDRB             R1, [R0]
  361 0000022A 2902            CMP              R1, #2
  362 0000022C BF04            ITT              EQ
  363 0000022E 2103            MOVEQ            R1, #3
  364 00000230 7001            STRBEQ           R1, [R0]
  365 00000232         
  366 00000232 4770            BX               LR
  367 00000234         
  368 00000234         Atualiza_LEDs
  369 00000234 B500            PUSH             { LR }
  370 00000236 F7FF FFFE       BL               blinkLEDs
  371 0000023A F85D EB04       POP              { LR }
  372 0000023E F1A9 0901       SUB              R9, #1
  373 00000242 F1B9 0F00       CMP              R9, #0
  374 00000246 D109            BNE              Atualiza_LEDsEnd
  375 00000248 F04F 0932       MOV              R9, #50
  376 0000024C F84D 8D04       PUSH             { R8 }
  377 00000250 F04F 38FF       MOV              R8, #-1
  378 00000254 FB05 F508       MUL              R5,R8
  379 00000258 F85D 8B04       POP              { R8 }
  380 0000025C         
  381 0000025C         Atualiza_LEDsEnd
  382 0000025C 4770            BX               LR
  383 0000025E         ; ------------------------------------------------------
                       --------------------------------------------------------
                       -----------
  384 0000025E         ; Fim do Arquivo
  385 0000025E         ; ------------------------------------------------------
                       --------------------------------------------------------
                       ----------- 
  386 0000025E         
  387 0000025E 43 6F 66 
              72 65 20 
              41 62 65 
              72 74 6F 
              00       MSG_OPEN
                               DCB              "Cofre Aberto", 0
  388 0000026B 43 6F 66 
              72 65 20 
              41 62 72 
              69 6E 64 
              6F 00    MSG_OPENING
                               DCB              "Cofre Abrindo", 0
  389 00000279 43 6F 66 
              72 65 20 
              46 65 63 
              68 61 6E 
              64 6F 00 MSG_CLOSING
                               DCB              "Cofre Fechando", 0
  390 00000288 43 6F 66 
              72 65 20 
              46 65 63 
              68 61 64 



ARM Macro Assembler    Page 9 


              6F 2E 00 MSG_CLOSED
                               DCB              "Cofre Fechado.", 0
  391 00000297 43 6F 66 
              72 65 20 
              54 72 61 
              76 61 64 
              6F 2E 00 MSG_LOCKED
                               DCB              "Cofre Travado.", 0
  392 000002A6         
  393 000002A6 00 00           ALIGN                        ;Garante que o fim 
                                                            da secao esta alinh
                                                            ada 
  394 000002A8                 END                          ;Fim do arquivo
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931,A1950W --cpu=Cortex-M4.fp.sp 
--depend=.\objects\main.d -o.\objects\main.o -IC:\Users\joaov\AppData\Local\Arm
\Packs\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C129 --predefine="__EVAL SETA 1" -
-predefine="__UVISION_VERSION SETA 538" --predefine="TM4C1294NCPDT SETA 1" --li
st=.\listings\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DATA 00000000

Symbol: DATA
   Definitions
      At line 21 in file main.s
   Uses
      None
Comment: DATA unused
currPword 00000005

Symbol: currPword
   Definitions
      At line 31 in file main.s
   Uses
      At line 133 in file main.s
      At line 169 in file main.s
      At line 316 in file main.s

guessPword 00000009

Symbol: guessPword
   Definitions
      At line 32 in file main.s
   Uses
      At line 170 in file main.s
      At line 216 in file main.s
      At line 226 in file main.s
      At line 273 in file main.s
      At line 295 in file main.s
      At line 318 in file main.s

lcdString 0000000D

Symbol: lcdString
   Definitions
      At line 33 in file main.s
   Uses
      At line 320 in file main.s
Comment: lcdString used once
masterPword 00000001

Symbol: masterPword
   Definitions
      At line 30 in file main.s
   Uses
      At line 272 in file main.s
      At line 308 in file main.s

sysState 00000000

Symbol: sysState
   Definitions
      At line 29 in file main.s
   Uses
      At line 67 in file main.s
      At line 125 in file main.s
      At line 199 in file main.s
      At line 218 in file main.s
      At line 288 in file main.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      At line 314 in file main.s
      At line 359 in file main.s

6 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 37 in file main.s
   Uses
      None
Comment: .text unused
Atualiza_LEDs 00000234

Symbol: Atualiza_LEDs
   Definitions
      At line 368 in file main.s
   Uses
      At line 243 in file main.s
Comment: Atualiza_LEDs used once
Atualiza_LEDsEnd 0000025C

Symbol: Atualiza_LEDsEnd
   Definitions
      At line 381 in file main.s
   Uses
      At line 374 in file main.s
Comment: Atualiza_LEDsEnd used once
InitilizeVars 000001D6

Symbol: InitilizeVars
   Definitions
      At line 307 in file main.s
   Uses
      At line 64 in file main.s
Comment: InitilizeVars used once
MSG_CLOSED 00000288

Symbol: MSG_CLOSED
   Definitions
      At line 390 in file main.s
   Uses
      At line 148 in file main.s
Comment: MSG_CLOSED used once
MSG_CLOSING 00000279

Symbol: MSG_CLOSING
   Definitions
      At line 389 in file main.s
   Uses
      At line 116 in file main.s
Comment: MSG_CLOSING used once
MSG_LOCKED 00000297

Symbol: MSG_LOCKED
   Definitions
      At line 391 in file main.s
   Uses
      At line 206 in file main.s
      At line 239 in file main.s
      At line 251 in file main.s

MSG_OPEN 0000025E



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: MSG_OPEN
   Definitions
      At line 387 in file main.s
   Uses
      At line 91 in file main.s
Comment: MSG_OPEN used once
MSG_OPENING 0000026B

Symbol: MSG_OPENING
   Definitions
      At line 388 in file main.s
   Uses
      At line 190 in file main.s
Comment: MSG_OPENING used once
MainLoop 00000014

Symbol: MainLoop
   Definitions
      At line 66 in file main.s
   Uses
      At line 86 in file main.s
Comment: MainLoop used once
Start 00000000

Symbol: Start
   Definitions
      At line 59 in file main.s
   Uses
      At line 40 in file main.s
Comment: Start used once
arraysCmp 00000208

Symbol: arraysCmp
   Definitions
      At line 337 in file main.s
   Uses
      At line 173 in file main.s
      At line 276 in file main.s
      At line 351 in file main.s

arraysCmpEnd 00000224

Symbol: arraysCmpEnd
   Definitions
      At line 353 in file main.s
   Uses
      At line 341 in file main.s
      At line 348 in file main.s

checkJ0Interrup 00000226

Symbol: checkJ0Interrup
   Definitions
      At line 358 in file main.s
   Uses
      None
Comment: checkJ0Interrup unused
closedSafe 000000AC



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols


Symbol: closedSafe
   Definitions
      At line 147 in file main.s
   Uses
      At line 76 in file main.s
Comment: closedSafe used once
closedSafeEnd 0000015E

Symbol: closedSafeEnd
   Definitions
      At line 233 in file main.s
   Uses
      At line 157 in file main.s
      At line 167 in file main.s
      At line 186 in file main.s
      At line 223 in file main.s
      At line 231 in file main.s

closedSafeHashtag 000000CE

Symbol: closedSafeHashtag
   Definitions
      At line 164 in file main.s
   Uses
      At line 161 in file main.s
Comment: closedSafeHashtag used once
closedSafeLockSafe 00000120

Symbol: closedSafeLockSafe
   Definitions
      At line 204 in file main.s
   Uses
      At line 184 in file main.s
Comment: closedSafeLockSafe used once
closedSafeNewInput 00000152

Symbol: closedSafeNewInput
   Definitions
      At line 225 in file main.s
   Uses
      At line 162 in file main.s
Comment: closedSafeNewInput used once
closedSafeOpenSafe 000000F8

Symbol: closedSafeOpenSafe
   Definitions
      At line 188 in file main.s
   Uses
      At line 180 in file main.s
Comment: closedSafeOpenSafe used once
newPword 0000003A

Symbol: newPword
   Definitions
      At line 90 in file main.s
   Uses
      At line 72 in file main.s
Comment: newPword used once



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

newPwordEnd 000000AA

Symbol: newPwordEnd
   Definitions
      At line 142 in file main.s
   Uses
      At line 100 in file main.s
      At line 110 in file main.s
      At line 130 in file main.s
      At line 140 in file main.s

newPwordHashtag 0000005C

Symbol: newPwordHashtag
   Definitions
      At line 107 in file main.s
   Uses
      At line 104 in file main.s
Comment: newPwordHashtag used once
newPwordNewInput 00000094

Symbol: newPwordNewInput
   Definitions
      At line 132 in file main.s
   Uses
      At line 105 in file main.s
Comment: newPwordNewInput used once
waitJ0Interrup 00000160

Symbol: waitJ0Interrup
   Definitions
      At line 238 in file main.s
   Uses
      At line 80 in file main.s
Comment: waitJ0Interrup used once
waitMasterPword 00000176

Symbol: waitMasterPword
   Definitions
      At line 250 in file main.s
   Uses
      At line 84 in file main.s
Comment: waitMasterPword used once
waitMasterPwordEnd 000001D4

Symbol: waitMasterPwordEnd
   Definitions
      At line 302 in file main.s
   Uses
      At line 260 in file main.s
      At line 270 in file main.s
      At line 284 in file main.s
      At line 292 in file main.s
      At line 300 in file main.s

waitMasterPwordHashtag 00000198

Symbol: waitMasterPwordHashtag
   Definitions



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

      At line 267 in file main.s
   Uses
      At line 264 in file main.s
Comment: waitMasterPwordHashtag used once
waitMasterPwordNewInput 000001C8

Symbol: waitMasterPwordNewInput
   Definitions
      At line 294 in file main.s
   Uses
      At line 265 in file main.s
Comment: waitMasterPwordNewInput used once
waitMasterPwordOpenSafe 000001BA

Symbol: waitMasterPwordOpenSafe
   Definitions
      At line 286 in file main.s
   Uses
      At line 282 in file main.s
Comment: waitMasterPwordOpenSafe used once
30 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NO_BTNS_PRESSED 00000000

Symbol: NO_BTNS_PRESSED
   Definitions
      At line 18 in file main.s
   Uses
      At line 98 in file main.s
      At line 155 in file main.s
      At line 258 in file main.s

1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

GPIO_Init 00000000

Symbol: GPIO_Init
   Definitions
      At line 49 in file main.s
   Uses
      At line 62 in file main.s
Comment: GPIO_Init used once
PLL_Init 00000000

Symbol: PLL_Init
   Definitions
      At line 46 in file main.s
   Uses
      At line 60 in file main.s
Comment: PLL_Init used once
SysTick_Init 00000000

Symbol: SysTick_Init
   Definitions
      At line 47 in file main.s
   Uses
      At line 61 in file main.s
Comment: SysTick_Init used once
SysTick_Wait1ms 00000000

Symbol: SysTick_Wait1ms
   Definitions
      At line 48 in file main.s
   Uses
      At line 114 in file main.s
      At line 121 in file main.s
      At line 195 in file main.s
      At line 211 in file main.s

blinkLEDs 00000000

Symbol: blinkLEDs
   Definitions
      At line 54 in file main.s
   Uses
      At line 370 in file main.s
Comment: blinkLEDs used once
escrever_caractere_senha 00000000

Symbol: escrever_caractere_senha
   Definitions
      At line 55 in file main.s
   Uses
      At line 138 in file main.s
Comment: escrever_caractere_senha used once
lcd_init 00000000

Symbol: lcd_init
   Definitions
      At line 51 in file main.s
   Uses
      At line 63 in file main.s
Comment: lcd_init used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

printArrayInLcd 00000000

Symbol: printArrayInLcd
   Definitions
      At line 52 in file main.s
   Uses
      At line 94 in file main.s
      At line 118 in file main.s
      At line 151 in file main.s
      At line 192 in file main.s
      At line 208 in file main.s
      At line 242 in file main.s
      At line 254 in file main.s

readKeyboard 00000000

Symbol: readKeyboard
   Definitions
      At line 53 in file main.s
   Uses
      At line 95 in file main.s
      At line 152 in file main.s
      At line 255 in file main.s

9 symbols
382 symbols in table
