


ARM Macro Assembler    Page 1 


    1 00000000         ; main.s
    2 00000000         ; Desenvolvido para a placa EK-TM4C1294XL
    3 00000000         ; Prof. Guilherme Peron
    4 00000000         ; Ver 1 19/03/2018
    5 00000000         ; Ver 2 26/08/2018
    6 00000000         ; Este programa deve esperar o usuario pressionar uma ch
                       ave.
    7 00000000         ; Caso o usuario pressione uma chave, um LED deve piscar
                        a cada 1 segundo.
    8 00000000         
    9 00000000         ; ------------------------------------------------------
                       -------------------------
   10 00000000                 THUMB                        ; Instrucaes do tip
                                                            o Thumb-2
   11 00000000         ; ------------------------------------------------------
                       -------------------------
   12 00000000         
   13 00000000         ; Declaracaes EQU - Defines
   14 00000000         ;<NOME>         EQU <VALOR>
   15 00000000         ; ========================
   16 00000000         ; Definicaes de Valores
   17 00000000         
   18 00000000 00000000 
                       NO_BTNS_PRESSED
                               EQU              0
   19 00000000         ; ------------------------------------------------------
                       -------------------------
   20 00000000         ; area de Dados - Declaracaes de variaveis
   21 00000000                 AREA             DATA, ALIGN=2
   22 00000000         ; Se alguma variavel for chamada em outro arquivo
   23 00000000         ;EXPORT  <var> [DATA,SIZE=<tam>]   ; Permite chamar a va
                       riavel <var> a 
   24 00000000         ; partir de outro arquivo
   25 00000000         ;<var> SPACE <tam>                        ; Declara uma 
                       variavel de nome <var>
   26 00000000         ; de <tam> bytes a partir da primeira 
   27 00000000         ; posicao da RAM  
   28 00000000         
   29 00000000 00      sysState
                               SPACE            0x1
   30 00000001 00 00 00 
              00       masterPword
                               SPACE            0x4
   31 00000005 00 00 00 
              00       currPword
                               SPACE            0x4
   32 00000009 00 00 00 
              00       guessPword
                               SPACE            0x4
   33 0000000D 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 2 


              00 00    lcdString
                               SPACE            0x20
   34 0000002D         ; ------------------------------------------------------
                       -------------------------
   35 0000002D         ; area de Cadigo - Tudo abaixo da diretiva a seguir sera
                        armazenado na memaria de 
   36 0000002D         ;                  cadigo
   37 0000002D                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   38 00000000         
   39 00000000         ; Se alguma funcao do arquivo for chamada em outro arqui
                       vo 
   40 00000000                 EXPORT           Start       ; Permite chamar a 
                                                            funcao Start a part
                                                            ir de 
   41 00000000                 EXPORT           checkJ0Interrup 
                                                            ; outro arquivo.
   42 00000000         
   43 00000000         ; Se chamar alguma funcao externa 
   44 00000000         ;IMPORT <func>              ; Permite chamar dentro dest
                       e arquivo uma 
   45 00000000         ; funcao <func>
   46 00000000                 IMPORT           PLL_Init
   47 00000000                 IMPORT           SysTick_Init
   48 00000000                 IMPORT           SysTick_Wait1ms
   49 00000000                 IMPORT           GPIO_Init
   50 00000000         
   51 00000000                 IMPORT           lcd_init
   52 00000000                 IMPORT           printArrayInLcd
   53 00000000                 IMPORT           readKeyboard
   54 00000000                 IMPORT           blinkLEDs
   55 00000000                 IMPORT           reset_LCD
   56 00000000                 IMPORT           pula_cursor_segunda_linha
   57 00000000         
   58 00000000         ; ------------------------------------------------------
                       -------------------------
   59 00000000         ; Funcao main()
   60 00000000         Start
   61 00000000 F7FF FFFE       BL               PLL_Init    ;Chama a subrotina 
                                                            para alterar o cloc
                                                            k do microcontrolad
                                                            or para 80MHz
   62 00000004 F7FF FFFE       BL               SysTick_Init ;Chama a subrotina
                                                             para inicializar o
                                                             SysTick
   63 00000008 F7FF FFFE       BL               GPIO_Init
   64 0000000C F7FF FFFE       BL               lcd_init    ;Chama a subrotina 
                                                            que inicializa os G
                                                            PIO
   65 00000010 F000 F90B       BL               InitilizeVars
   66 00000014         ;-------------------------------------------------------
                       -------------------------
   67 00000014         MainLoop
   68 00000014 49BF            LDR              R1, =sysState
   69 00000016 7809            LDRB             R1, [R1]
   70 00000018         
   71 00000018 2900            CMP              R1, #0
   72 0000001A BF08            IT               EQ
   73 0000001C F000 F80D       BLEQ             newPword



ARM Macro Assembler    Page 3 


   74 00000020         
   75 00000020 2901            CMP              R1, #1
   76 00000022 BF08            IT               EQ
   77 00000024 F000 F84A       BLEQ             closedSafe
   78 00000028         
   79 00000028 2902            CMP              R1, #2
   80 0000002A BF08            IT               EQ
   81 0000002C F000 F8AE       BLEQ             waitJ0Interrup
   82 00000030         
   83 00000030 2903            CMP              R1, #3
   84 00000032 BF08            IT               EQ
   85 00000034 F000 F8B0       BLEQ             waitMasterPword
   86 00000038         
   87 00000038 E7EC            B                MainLoop
   88 0000003A         
   89 0000003A         ;-------------------------------------------------------
                       -------------------------
   90 0000003A         ; Routine for entering a new password and close the safe
                       
   91 0000003A         newPword
   92 0000003A B500            PUSH{LR}
   93 0000003C F7FF FFFE       BL               readKeyboard
   94 00000040 F85D EB04       POP{LR}
   95 00000044         
   96 00000044 2800            CMP              R0, #NO_BTNS_PRESSED
   97 00000046 BF08            IT               EQ
   98 00000048 E037            BEQ              newPwordEnd
   99 0000004A         
  100 0000004A 2F04            CMP              R7, #4      ; i == 4
  101 0000004C BF08            IT               EQ
  102 0000004E E000            BEQ              newPwordHashtag
  103 00000050 E026            B                newPwordNewInput
  104 00000052         
  105 00000052         newPwordHashtag
  106 00000052 2823            CMP              R0, #'#'    ; R0 == '#'
  107 00000054 BF18            IT               NE
  108 00000056 E030            BNE              newPwordEnd
  109 00000058         
  110 00000058 B500            PUSH{LR}
  111 0000005A F44F 707A       MOV              R0, #1000
  112 0000005E F7FF FFFE       BL               SysTick_Wait1ms
  113 00000062         
  114 00000062 F7FF FFFE       BL               reset_LCD   ; Resets LCD before
                                                             next print
  115 00000066         
  116 00000066 48AC            LDR              R0, =MSG_CLOSING
  117 00000068 F04F 010E       MOV              R1, #14
  118 0000006C F7FF FFFE       BL               printArrayInLcd
  119 00000070         
  120 00000070 F241 3088       MOV              R0, #5000
  121 00000074 F7FF FFFE       BL               SysTick_Wait1ms
  122 00000078         
  123 00000078 F7FF FFFE       BL               reset_LCD   ; Resets LCD before
                                                             next print
  124 0000007C         
  125 0000007C 48A7            LDR              R0, =MSG_CLOSED
  126 0000007E F04F 010E       MOV              R1, #14
  127 00000082 F7FF FFFE       BL               printArrayInLcd
  128 00000086 F7FF FFFE       BL               pula_cursor_segunda_linha



ARM Macro Assembler    Page 4 


  129 0000008A         
  130 0000008A F04F 0700       MOV              R7, #0      ; i = 0
  131 0000008E F04F 0600       MOV              R6, #0      ; errorCtr = 0
  132 00000092 49A0            LDR              R1, =sysState
  133 00000094 F04F 0001       MOV              R0, #1
  134 00000098 7008            STRB             R0, [R1]
  135 0000009A F85D EB04       POP{LR}
  136 0000009E         
  137 0000009E E00C            B                newPwordEnd
  138 000000A0         
  139 000000A0         newPwordNewInput
  140 000000A0 499F            LDR              R1, =currPword
  141 000000A2 4439            ADD              R1, R1, R7
  142 000000A4 7008            STRB             R0, [R1]    ; currPword[i] = R0
                                                            
  143 000000A6 F107 0701       ADD              R7, R7, #1  ; i++
  144 000000AA B500            PUSH{LR}
  145 000000AC F04F 0101       MOV              R1, #1
  146 000000B0 F7FF FFFE       BL               printArrayInLcd
  147 000000B4 F85D EB04       POP{LR}
  148 000000B8 E7FF            B                newPwordEnd
  149 000000BA         
  150 000000BA         newPwordEnd
  151 000000BA 4770            BX               LR
  152 000000BC         
  153 000000BC         ;-------------------------------------------------------
                       -------------------------
  154 000000BC         ; Routine for when the safe is closed: either opens or l
                       ocks permanently
  155 000000BC         closedSafe
  156 000000BC B500            PUSH{LR}
  157 000000BE F7FF FFFE       BL               readKeyboard
  158 000000C2 F85D EB04       POP{LR}
  159 000000C6         
  160 000000C6 2800            CMP              R0, #NO_BTNS_PRESSED
  161 000000C8 BF08            IT               EQ
  162 000000CA E05E            BEQ              closedSafeEnd
  163 000000CC         
  164 000000CC 2F04            CMP              R7, #4      ; i == 4
  165 000000CE BF08            IT               EQ
  166 000000D0 E000            BEQ              closedSafeHashtag
  167 000000D2 E04D            B                closedSafeNewInput
  168 000000D4         
  169 000000D4         closedSafeHashtag
  170 000000D4 2823            CMP              R0, #'#'    ; R0 == '#'
  171 000000D6 BF18            IT               NE
  172 000000D8 E057            BNE              closedSafeEnd
  173 000000DA         
  174 000000DA 4891            LDR              R0, =currPword
  175 000000DC 4991            LDR              R1, =guessPword
  176 000000DE F04F 0204       MOV              R2, #4
  177 000000E2 B500            PUSH{LR}
  178 000000E4 F000 F8C6       BL               arraysCmp
  179 000000E8 F85D EB04       POP{LR}
  180 000000EC         
  181 000000EC 2801            CMP              R0, #1
  182 000000EE BF1A            ITTE             NE
  183 000000F0 2700            MOVNE            R7, #0      ; i = 0
  184 000000F2 1C76            ADDNE            R6, R6, #1  ; errorCtr++



ARM Macro Assembler    Page 5 


  185 000000F4 E003            BEQ              closedSafeOpenSafe
  186 000000F6         
  187 000000F6 2E03            CMP              R6, #3      ; errorCtr == 3
  188 000000F8 BF08            IT               EQ
  189 000000FA E020            BEQ              closedSafeLockSafe
  190 000000FC         
  191 000000FC E045            B                closedSafeEnd
  192 000000FE         
  193 000000FE         closedSafeOpenSafe
  194 000000FE B500            PUSH{LR}
  195 00000100 F7FF FFFE       BL               reset_LCD   ; Resets LCD before
                                                             next print
  196 00000104         
  197 00000104 4888            LDR              R0, =MSG_OPENING
  198 00000106 F04F 010D       MOV              R1, #13
  199 0000010A F7FF FFFE       BL               printArrayInLcd
  200 0000010E         
  201 0000010E F241 3088       MOV              R0, #5000
  202 00000112 F7FF FFFE       BL               SysTick_Wait1ms
  203 00000116         
  204 00000116 F7FF FFFE       BL               reset_LCD   ; Resets LCD before
                                                             next print
  205 0000011A         
  206 0000011A 4884            LDR              R0, =MSG_OPEN
  207 0000011C F04F 010C       MOV              R1, #12
  208 00000120 F7FF FFFE       BL               printArrayInLcd
  209 00000124 F7FF FFFE       BL               pula_cursor_segunda_linha
  210 00000128         
  211 00000128 F04F 0700       MOV              R7, #0      ; i = 0
  212 0000012C F04F 0600       MOV              R6, #0      ; errorCtr = 0
  213 00000130 4978            LDR              R1, =sysState
  214 00000132 F04F 0000       MOV              R0, #0
  215 00000136 7008            STRB             R0, [R1]
  216 00000138 F85D EB04       POP{LR}
  217 0000013C         
  218 0000013C E025            B                closedSafeEnd
  219 0000013E         
  220 0000013E         closedSafeLockSafe
  221 0000013E B500            PUSH{LR}
  222 00000140 F7FF FFFE       BL               reset_LCD   ; Resets LCD before
                                                             next print
  223 00000144         
  224 00000144 487A            LDR              R0, =MSG_LOCKED
  225 00000146 F04F 010E       MOV              R1, #14
  226 0000014A F7FF FFFE       BL               printArrayInLcd
  227 0000014E F7FF FFFE       BL               pula_cursor_segunda_linha
  228 00000152         
  229 00000152 F04F 0700       MOV              R7, #0      ; i = 0
  230 00000156 F04F 0600       MOV              R6, #0      ; errorCtr = 0
  231 0000015A F04F 0300       MOV              R3, #0
  232 0000015E 4971            LDR              R1, =guessPword
  233 00000160 600B            STR              R3, [R1]
  234 00000162 496C            LDR              R1, =sysState
  235 00000164 F04F 0002       MOV              R0, #2
  236 00000168 7008            STRB             R0, [R1]
  237 0000016A F85D EB04       POP{LR}
  238 0000016E         
  239 0000016E E00C            B                closedSafeEnd
  240 00000170         



ARM Macro Assembler    Page 6 


  241 00000170         closedSafeNewInput
  242 00000170 496C            LDR              R1, =guessPword
  243 00000172 4439            ADD              R1, R1, R7
  244 00000174 7008            STRB             R0, [R1]    ; guessPword[i] = R
                                                            0
  245 00000176 F107 0701       ADD              R7, R7, #1  ; i++
  246 0000017A B500            PUSH{LR}
  247 0000017C F04F 0101       MOV              R1, #1
  248 00000180 F7FF FFFE       BL               printArrayInLcd
  249 00000184 F85D EB04       POP{LR}
  250 00000188         
  251 00000188 E7FF            B                closedSafeEnd
  252 0000018A         
  253 0000018A         closedSafeEnd
  254 0000018A 4770            BX               LR
  255 0000018C         
  256 0000018C         ;-------------------------------------------------------
                       -------------------------
  257 0000018C         ; Routine that waits for a interruption and disables all
                        other funcions
  258 0000018C         waitJ0Interrup
  259 0000018C B500            PUSH{LR}
  260 0000018E F000 F887       BL               Atualiza_LEDs
  261 00000192 F85D EB04       POP{LR}
  262 00000196         
  263 00000196 4770            BX               LR
  264 00000198         
  265 00000198         ;-------------------------------------------------------
                       -------------------------
  266 00000198         ; Routine to check if the master password was correctly 
                       written
  267 00000198         waitMasterPword
  268 00000198 B500            PUSH{LR}
  269 0000019A F7FF FFFE       BL               readKeyboard
  270 0000019E F85D EB04       POP{LR}
  271 000001A2         
  272 000001A2 2800            CMP              R0, #NO_BTNS_PRESSED
  273 000001A4 BF08            IT               EQ
  274 000001A6 E03F            BEQ              waitMasterPwordEnd
  275 000001A8         
  276 000001A8 2F04            CMP              R7, #4      ; i == 4
  277 000001AA BF08            IT               EQ
  278 000001AC E000            BEQ              waitMasterPwordHashtag
  279 000001AE E02E            B                waitMasterPwordNewInput
  280 000001B0         
  281 000001B0         waitMasterPwordHashtag
  282 000001B0 2823            CMP              R0, #'#'    ; R0 == '#'
  283 000001B2 BF18            IT               NE
  284 000001B4 E038            BNE              waitMasterPwordEnd
  285 000001B6         
  286 000001B6 485F            LDR              R0, =masterPword
  287 000001B8 495A            LDR              R1, =guessPword
  288 000001BA F04F 0204       MOV              R2, #4
  289 000001BE B500            PUSH{LR}
  290 000001C0 F000 F858       BL               arraysCmp
  291 000001C4 F85D EB04       POP{LR}
  292 000001C8         
  293 000001C8 2801            CMP              R0, #1
  294 000001CA BF14            ITE              NE



ARM Macro Assembler    Page 7 


  295 000001CC 2700            MOVNE            R7, #0      ; i = 0
  296 000001CE E000            BEQ              waitMasterPwordOpenSafe
  297 000001D0         
  298 000001D0 E02A            B                waitMasterPwordEnd
  299 000001D2         
  300 000001D2         waitMasterPwordOpenSafe
  301 000001D2 B500            PUSH{LR}
  302 000001D4 F7FF FFFE       BL               reset_LCD   ; Resets LCD before
                                                             next print
  303 000001D8         
  304 000001D8 4853            LDR              R0, =MSG_OPENING
  305 000001DA F04F 010D       MOV              R1, #13
  306 000001DE F7FF FFFE       BL               printArrayInLcd
  307 000001E2         
  308 000001E2 F241 3088       MOV              R0, #5000
  309 000001E6 F7FF FFFE       BL               SysTick_Wait1ms
  310 000001EA F85D EB04       POP{LR}
  311 000001EE         
  312 000001EE F7FF FFFE       BL               reset_LCD   ; Resets LCD before
                                                             next print
  313 000001F2         
  314 000001F2 484E            LDR              R0, =MSG_OPEN
  315 000001F4 F04F 010C       MOV              R1, #12
  316 000001F8 F7FF FFFE       BL               printArrayInLcd
  317 000001FC F7FF FFFE       BL               pula_cursor_segunda_linha
  318 00000200         
  319 00000200 F04F 0700       MOV              R7, #0      ; i = 0
  320 00000204 4943            LDR              R1, =sysState
  321 00000206 F04F 0000       MOV              R0, #0
  322 0000020A 7008            STRB             R0, [R1]
  323 0000020C         
  324 0000020C E00C            B                waitMasterPwordEnd
  325 0000020E         
  326 0000020E         waitMasterPwordNewInput
  327 0000020E 4945            LDR              R1, =guessPword
  328 00000210 4439            ADD              R1, R1, R7
  329 00000212 7008            STRB             R0, [R1]    ; guessPword[i] = R
                                                            0
  330 00000214 F107 0701       ADD              R7, R7, #1  ; i++
  331 00000218         
  332 00000218 B500            PUSH{LR}
  333 0000021A F04F 0101       MOV              R1, #1
  334 0000021E F7FF FFFE       BL               printArrayInLcd
  335 00000222 F85D EB04       POP{LR}
  336 00000226         
  337 00000226 E7FF            B                waitMasterPwordEnd
  338 00000228         
  339 00000228         waitMasterPwordEnd
  340 00000228 4770            BX               LR
  341 0000022A         
  342 0000022A         ;-------------------------------------------------------
                       -------------------------
  343 0000022A         ; Initializes variables before the main loop
  344 0000022A         InitilizeVars
  345 0000022A 4942            LDR              R1, =masterPword
  346 0000022C F243 4231       MOV              R2, #0x3431
  347 00000230 F2C3 7237       MOVT             R2, #0x3737
  348 00000234 600A            STR              R2, [R1]
  349 00000236         



ARM Macro Assembler    Page 8 


  350 00000236 F04F 0200       MOV              R2, #0
  351 0000023A 4936            LDR              R1, =sysState
  352 0000023C 700A            STRB             R2, [R1]
  353 0000023E 4938            LDR              R1, =currPword
  354 00000240 600A            STR              R2, [R1]
  355 00000242 4938            LDR              R1, =guessPword
  356 00000244 600A            STR              R2, [R1]
  357 00000246 493E            LDR              R1, =lcdString
  358 00000248 600A            STR              R2, [R1]
  359 0000024A         
  360 0000024A F04F 0600       MOV              R6, #0      ; errorCtr
  361 0000024E F04F 0700       MOV              R7, #0      ; Iterator for pass
                                                            words
  362 00000252 F04F 0800       MOV              R8, #0      ; Iterator for LCD
  363 00000256 F04F 0932       MOV              R9, #50
  364 0000025A F04F 0501       MOV              R5, #1      ; blinkLeds input(O
                                                            N/OFF)
  365 0000025E         
  366 0000025E 4833            LDR              R0, =MSG_OPEN
  367 00000260 F04F 010C       MOV              R1, #12
  368 00000264 B500            PUSH{LR}
  369 00000266 F7FF FFFE       BL               printArrayInLcd
  370 0000026A F7FF FFFE       BL               pula_cursor_segunda_linha
  371 0000026E F85D EB04       POP{LR}
  372 00000272         
  373 00000272 4770            BX               LR
  374 00000274         
  375 00000274         ;-------------------------------------------------------
                       -------------------------
  376 00000274         ; Verifies if two arrays are equal
  377 00000274         ; Input:  R0 = array1 starting address
  378 00000274         ;         R1 = array2 starting address
  379 00000274         ;    R2 = array size
  380 00000274         ; Output: R0 = 1 if the arrays are equal, 0 if not
  381 00000274         arraysCmp
  382 00000274 2A00            CMP              R2, #0
  383 00000276 BF04            ITT              EQ
  384 00000278 2001            MOVEQ            R0, #1
  385 0000027A E009            BEQ              arraysCmpEnd
  386 0000027C         
  387 0000027C F810 3B01       LDRB             R3, [R0], #1
  388 00000280 F811 4B01       LDRB             R4, [R1], #1
  389 00000284 42A3            CMP              R3, R4
  390 00000286 BF1C            ITT              NE
  391 00000288 2000            MOVNE            R0, #0
  392 0000028A E001            BNE              arraysCmpEnd
  393 0000028C         
  394 0000028C 1E52            SUBS             R2, R2, #1
  395 0000028E E7F1            B                arraysCmp
  396 00000290         
  397 00000290         arraysCmpEnd
  398 00000290 4770            BX               LR
  399 00000292         
  400 00000292         ;-------------------------------------------------------
                       -------------------------
  401 00000292         ; Verifies if the interruption should change state
  402 00000292         checkJ0Interrup
  403 00000292 4820            LDR              R0, =sysState
  404 00000294 7801            LDRB             R1, [R0]



ARM Macro Assembler    Page 9 


  405 00000296 2902            CMP              R1, #2
  406 00000298 BF04            ITT              EQ
  407 0000029A 2103            MOVEQ            R1, #3
  408 0000029C 7001            STRBEQ           R1, [R0]
  409 0000029E         
  410 0000029E 4770            BX               LR
  411 000002A0         
  412 000002A0         Atualiza_LEDs
  413 000002A0 B500            PUSH             { LR }
  414 000002A2 F7FF FFFE       BL               blinkLEDs
  415 000002A6 F85D EB04       POP              { LR }
  416 000002AA F1A9 0901       SUB              R9, #1
  417 000002AE F1B9 0F00       CMP              R9, #0
  418 000002B2 D109            BNE              Atualiza_LEDsEnd
  419 000002B4 F04F 0932       MOV              R9, #50
  420 000002B8 F84D 8D04       PUSH             { R8 }
  421 000002BC F04F 38FF       MOV              R8, #-1
  422 000002C0 FB05 F508       MUL              R5,R8
  423 000002C4 F85D 8B04       POP              { R8 }
  424 000002C8         
  425 000002C8         Atualiza_LEDsEnd
  426 000002C8 4770            BX               LR
  427 000002CA         
  428 000002CA         ; ------------------------------------------------------
                       --------------------------------------------------------
                       -----------
  429 000002CA         ; Fim do Arquivo
  430 000002CA         ; ------------------------------------------------------
                       --------------------------------------------------------
                       ----------- 
  431 000002CA         
  432 000002CA 43 6F 66 
              72 65 20 
              41 62 65 
              72 74 6F 
              00       MSG_OPEN
                               DCB              "Cofre Aberto", 0
  433 000002D7 43 6F 66 
              72 65 20 
              41 62 72 
              69 6E 64 
              6F 00    MSG_OPENING
                               DCB              "Cofre Abrindo", 0
  434 000002E5 43 6F 66 
              72 65 20 
              46 65 63 
              68 61 6E 
              64 6F 00 MSG_CLOSING
                               DCB              "Cofre Fechando", 0
  435 000002F4 43 6F 66 
              72 65 20 
              46 65 63 
              68 61 64 
              6F 2E 00 MSG_CLOSED
                               DCB              "Cofre Fechado.", 0
  436 00000303 43 6F 66 
              72 65 20 
              54 72 61 
              76 61 64 



ARM Macro Assembler    Page 10 


              6F 2E 00 MSG_LOCKED
                               DCB              "Cofre Travado.", 0
  437 00000312         
  438 00000312 00 00           ALIGN                        ;Garante que o fim 
                                                            da secao esta alinh
                                                            ada 
  439 00000314                 END                          ;Fim do arquivo
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931,A1950W --cpu=Cortex-M4.fp.sp 
--depend=.\objects\main.d -o.\objects\main.o -IC:\Users\joaov\AppData\Local\Arm
\Packs\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C129 --predefine="__EVAL SETA 1" -
-predefine="__UVISION_VERSION SETA 538" --predefine="TM4C1294NCPDT SETA 1" --li
st=.\listings\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DATA 00000000

Symbol: DATA
   Definitions
      At line 21 in file main.s
   Uses
      None
Comment: DATA unused
currPword 00000005

Symbol: currPword
   Definitions
      At line 31 in file main.s
   Uses
      At line 140 in file main.s
      At line 174 in file main.s
      At line 353 in file main.s

guessPword 00000009

Symbol: guessPword
   Definitions
      At line 32 in file main.s
   Uses
      At line 175 in file main.s
      At line 232 in file main.s
      At line 242 in file main.s
      At line 287 in file main.s
      At line 327 in file main.s
      At line 355 in file main.s

lcdString 0000000D

Symbol: lcdString
   Definitions
      At line 33 in file main.s
   Uses
      At line 357 in file main.s
Comment: lcdString used once
masterPword 00000001

Symbol: masterPword
   Definitions
      At line 30 in file main.s
   Uses
      At line 286 in file main.s
      At line 345 in file main.s

sysState 00000000

Symbol: sysState
   Definitions
      At line 29 in file main.s
   Uses
      At line 68 in file main.s
      At line 132 in file main.s
      At line 213 in file main.s
      At line 234 in file main.s
      At line 320 in file main.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      At line 351 in file main.s
      At line 403 in file main.s

6 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 37 in file main.s
   Uses
      None
Comment: .text unused
Atualiza_LEDs 000002A0

Symbol: Atualiza_LEDs
   Definitions
      At line 412 in file main.s
   Uses
      At line 260 in file main.s
Comment: Atualiza_LEDs used once
Atualiza_LEDsEnd 000002C8

Symbol: Atualiza_LEDsEnd
   Definitions
      At line 425 in file main.s
   Uses
      At line 418 in file main.s
Comment: Atualiza_LEDsEnd used once
InitilizeVars 0000022A

Symbol: InitilizeVars
   Definitions
      At line 344 in file main.s
   Uses
      At line 65 in file main.s
Comment: InitilizeVars used once
MSG_CLOSED 000002F4

Symbol: MSG_CLOSED
   Definitions
      At line 435 in file main.s
   Uses
      At line 125 in file main.s
Comment: MSG_CLOSED used once
MSG_CLOSING 000002E5

Symbol: MSG_CLOSING
   Definitions
      At line 434 in file main.s
   Uses
      At line 116 in file main.s
Comment: MSG_CLOSING used once
MSG_LOCKED 00000303

Symbol: MSG_LOCKED
   Definitions
      At line 436 in file main.s
   Uses
      At line 224 in file main.s
Comment: MSG_LOCKED used once
MSG_OPEN 000002CA

Symbol: MSG_OPEN



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 432 in file main.s
   Uses
      At line 206 in file main.s
      At line 314 in file main.s
      At line 366 in file main.s

MSG_OPENING 000002D7

Symbol: MSG_OPENING
   Definitions
      At line 433 in file main.s
   Uses
      At line 197 in file main.s
      At line 304 in file main.s

MainLoop 00000014

Symbol: MainLoop
   Definitions
      At line 67 in file main.s
   Uses
      At line 87 in file main.s
Comment: MainLoop used once
Start 00000000

Symbol: Start
   Definitions
      At line 60 in file main.s
   Uses
      At line 40 in file main.s
Comment: Start used once
arraysCmp 00000274

Symbol: arraysCmp
   Definitions
      At line 381 in file main.s
   Uses
      At line 178 in file main.s
      At line 290 in file main.s
      At line 395 in file main.s

arraysCmpEnd 00000290

Symbol: arraysCmpEnd
   Definitions
      At line 397 in file main.s
   Uses
      At line 385 in file main.s
      At line 392 in file main.s

checkJ0Interrup 00000292

Symbol: checkJ0Interrup
   Definitions
      At line 402 in file main.s
   Uses
      At line 41 in file main.s
Comment: checkJ0Interrup used once



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

closedSafe 000000BC

Symbol: closedSafe
   Definitions
      At line 155 in file main.s
   Uses
      At line 77 in file main.s
Comment: closedSafe used once
closedSafeEnd 0000018A

Symbol: closedSafeEnd
   Definitions
      At line 253 in file main.s
   Uses
      At line 162 in file main.s
      At line 172 in file main.s
      At line 191 in file main.s
      At line 218 in file main.s
      At line 239 in file main.s
      At line 251 in file main.s

closedSafeHashtag 000000D4

Symbol: closedSafeHashtag
   Definitions
      At line 169 in file main.s
   Uses
      At line 166 in file main.s
Comment: closedSafeHashtag used once
closedSafeLockSafe 0000013E

Symbol: closedSafeLockSafe
   Definitions
      At line 220 in file main.s
   Uses
      At line 189 in file main.s
Comment: closedSafeLockSafe used once
closedSafeNewInput 00000170

Symbol: closedSafeNewInput
   Definitions
      At line 241 in file main.s
   Uses
      At line 167 in file main.s
Comment: closedSafeNewInput used once
closedSafeOpenSafe 000000FE

Symbol: closedSafeOpenSafe
   Definitions
      At line 193 in file main.s
   Uses
      At line 185 in file main.s
Comment: closedSafeOpenSafe used once
newPword 0000003A

Symbol: newPword
   Definitions
      At line 91 in file main.s
   Uses



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

      At line 73 in file main.s
Comment: newPword used once
newPwordEnd 000000BA

Symbol: newPwordEnd
   Definitions
      At line 150 in file main.s
   Uses
      At line 98 in file main.s
      At line 108 in file main.s
      At line 137 in file main.s
      At line 148 in file main.s

newPwordHashtag 00000052

Symbol: newPwordHashtag
   Definitions
      At line 105 in file main.s
   Uses
      At line 102 in file main.s
Comment: newPwordHashtag used once
newPwordNewInput 000000A0

Symbol: newPwordNewInput
   Definitions
      At line 139 in file main.s
   Uses
      At line 103 in file main.s
Comment: newPwordNewInput used once
waitJ0Interrup 0000018C

Symbol: waitJ0Interrup
   Definitions
      At line 258 in file main.s
   Uses
      At line 81 in file main.s
Comment: waitJ0Interrup used once
waitMasterPword 00000198

Symbol: waitMasterPword
   Definitions
      At line 267 in file main.s
   Uses
      At line 85 in file main.s
Comment: waitMasterPword used once
waitMasterPwordEnd 00000228

Symbol: waitMasterPwordEnd
   Definitions
      At line 339 in file main.s
   Uses
      At line 274 in file main.s
      At line 284 in file main.s
      At line 298 in file main.s
      At line 324 in file main.s
      At line 337 in file main.s

waitMasterPwordHashtag 000001B0




ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

Symbol: waitMasterPwordHashtag
   Definitions
      At line 281 in file main.s
   Uses
      At line 278 in file main.s
Comment: waitMasterPwordHashtag used once
waitMasterPwordNewInput 0000020E

Symbol: waitMasterPwordNewInput
   Definitions
      At line 326 in file main.s
   Uses
      At line 279 in file main.s
Comment: waitMasterPwordNewInput used once
waitMasterPwordOpenSafe 000001D2

Symbol: waitMasterPwordOpenSafe
   Definitions
      At line 300 in file main.s
   Uses
      At line 296 in file main.s
Comment: waitMasterPwordOpenSafe used once
30 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NO_BTNS_PRESSED 00000000

Symbol: NO_BTNS_PRESSED
   Definitions
      At line 18 in file main.s
   Uses
      At line 96 in file main.s
      At line 160 in file main.s
      At line 272 in file main.s

1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

GPIO_Init 00000000

Symbol: GPIO_Init
   Definitions
      At line 49 in file main.s
   Uses
      At line 63 in file main.s
Comment: GPIO_Init used once
PLL_Init 00000000

Symbol: PLL_Init
   Definitions
      At line 46 in file main.s
   Uses
      At line 61 in file main.s
Comment: PLL_Init used once
SysTick_Init 00000000

Symbol: SysTick_Init
   Definitions
      At line 47 in file main.s
   Uses
      At line 62 in file main.s
Comment: SysTick_Init used once
SysTick_Wait1ms 00000000

Symbol: SysTick_Wait1ms
   Definitions
      At line 48 in file main.s
   Uses
      At line 112 in file main.s
      At line 121 in file main.s
      At line 202 in file main.s
      At line 309 in file main.s

blinkLEDs 00000000

Symbol: blinkLEDs
   Definitions
      At line 54 in file main.s
   Uses
      At line 414 in file main.s
Comment: blinkLEDs used once
lcd_init 00000000

Symbol: lcd_init
   Definitions
      At line 51 in file main.s
   Uses
      At line 64 in file main.s
Comment: lcd_init used once
printArrayInLcd 00000000

Symbol: printArrayInLcd
   Definitions
      At line 52 in file main.s
   Uses
      At line 118 in file main.s
      At line 127 in file main.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

      At line 146 in file main.s
      At line 199 in file main.s
      At line 208 in file main.s
      At line 226 in file main.s
      At line 248 in file main.s
      At line 306 in file main.s
      At line 316 in file main.s
      At line 334 in file main.s
      At line 369 in file main.s

pula_cursor_segunda_linha 00000000

Symbol: pula_cursor_segunda_linha
   Definitions
      At line 56 in file main.s
   Uses
      At line 128 in file main.s
      At line 209 in file main.s
      At line 227 in file main.s
      At line 317 in file main.s
      At line 370 in file main.s

readKeyboard 00000000

Symbol: readKeyboard
   Definitions
      At line 53 in file main.s
   Uses
      At line 93 in file main.s
      At line 157 in file main.s
      At line 269 in file main.s

reset_LCD 00000000

Symbol: reset_LCD
   Definitions
      At line 55 in file main.s
   Uses
      At line 114 in file main.s
      At line 123 in file main.s
      At line 195 in file main.s
      At line 204 in file main.s
      At line 222 in file main.s
      At line 302 in file main.s
      At line 312 in file main.s

10 symbols
383 symbols in table
