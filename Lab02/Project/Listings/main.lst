


ARM Macro Assembler    Page 1 


    1 00000000         ; main.s
    2 00000000         ; Desenvolvido para a placa EK-TM4C1294XL
    3 00000000         ; Prof. Guilherme Peron
    4 00000000         ; Ver 1 19/03/2018
    5 00000000         ; Ver 2 26/08/2018
    6 00000000         ; Este programa deve esperar o usuario pressionar uma ch
                       ave.
    7 00000000         ; Caso o usuario pressione uma chave, um LED deve piscar
                        a cada 1 segundo.
    8 00000000         
    9 00000000         ; ------------------------------------------------------
                       -------------------------
   10 00000000                 THUMB                        ; Instrucaes do tip
                                                            o Thumb-2
   11 00000000         ; ------------------------------------------------------
                       -------------------------
   12 00000000         
   13 00000000         ; Declaracaes EQU - Defines
   14 00000000         ;<NOME>         EQU <VALOR>
   15 00000000         ; ========================
   16 00000000         ; Definicaes de Valores
   17 00000000         
   18 00000000 00000000 
                       NO_BTNS_PRESSED
                               EQU              0
   19 00000000         ; ------------------------------------------------------
                       -------------------------
   20 00000000         ; area de Dados - Declaracaes de variaveis
   21 00000000                 AREA             DATA, ALIGN=2
   22 00000000         ; Se alguma variavel for chamada em outro arquivo
   23 00000000         ;EXPORT  <var> [DATA,SIZE=<tam>]   ; Permite chamar a va
                       riavel <var> a 
   24 00000000         ; partir de outro arquivo
   25 00000000         ;<var> SPACE <tam>                        ; Declara uma 
                       variavel de nome <var>
   26 00000000         ; de <tam> bytes a partir da primeira 
   27 00000000         ; posicao da RAM  
   28 00000000         
   29 00000000 00      sysState
                               SPACE            0x1
   30 00000001 00 00 00 
              00       masterPword
                               SPACE            0x4
   31 00000005 00 00 00 
              00       currPword
                               SPACE            0x4
   32 00000009 00 00 00 
              00       guessPword
                               SPACE            0x4
   33 0000000D 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 2 


              00 00    lcdString
                               SPACE            0x20
   34 0000002D         ; ------------------------------------------------------
                       -------------------------
   35 0000002D         ; area de Cadigo - Tudo abaixo da diretiva a seguir sera
                        armazenado na memaria de 
   36 0000002D         ;                  cadigo
   37 0000002D                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   38 00000000         
   39 00000000         ; Se alguma funcao do arquivo for chamada em outro arqui
                       vo 
   40 00000000                 EXPORT           Start       ; Permite chamar a 
                                                            funcao Start a part
                                                            ir de 
   41 00000000                 EXPORT           checkJ0Interrup 
                                                            ; outro arquivo.
   42 00000000         
   43 00000000         ; Se chamar alguma funcao externa 
   44 00000000         ;IMPORT <func>              ; Permite chamar dentro dest
                       e arquivo uma 
   45 00000000         ; funcao <func>
   46 00000000                 IMPORT           PLL_Init
   47 00000000                 IMPORT           SysTick_Init
   48 00000000                 IMPORT           SysTick_Wait1ms
   49 00000000                 IMPORT           GPIO_Init
   50 00000000         
   51 00000000                 IMPORT           lcd_init
   52 00000000                 IMPORT           printArrayInLcd
   53 00000000                 IMPORT           readKeyboard
   54 00000000                 IMPORT           blinkLEDs
   55 00000000                 IMPORT           reset_LCD
   56 00000000                 IMPORT           pula_cursor_segunda_linha
   57 00000000         
   58 00000000         ; ------------------------------------------------------
                       -------------------------
   59 00000000         ; Funcao main()
   60 00000000         Start
   61 00000000 F7FF FFFE       BL               PLL_Init    ;Chama a subrotina 
                                                            para alterar o cloc
                                                            k do microcontrolad
                                                            or para 80MHz
   62 00000004 F7FF FFFE       BL               SysTick_Init ;Chama a subrotina
                                                             para inicializar o
                                                             SysTick
   63 00000008 F7FF FFFE       BL               GPIO_Init
   64 0000000C F7FF FFFE       BL               lcd_init    ;Chama a subrotina 
                                                            que inicializa os G
                                                            PIO
   65 00000010 F000 F90F       BL               InitilizeVars
   66 00000014         ;-------------------------------------------------------
                       -------------------------
   67 00000014         MainLoop
   68 00000014 49C1            LDR              R1, =sysState
   69 00000016 7809            LDRB             R1, [R1]
   70 00000018         
   71 00000018 2900            CMP              R1, #0
   72 0000001A BF08            IT               EQ
   73 0000001C F000 F80D       BLEQ             newPword



ARM Macro Assembler    Page 3 


   74 00000020         
   75 00000020 2901            CMP              R1, #1
   76 00000022 BF08            IT               EQ
   77 00000024 F000 F84A       BLEQ             closedSafe
   78 00000028         
   79 00000028 2902            CMP              R1, #2
   80 0000002A BF08            IT               EQ
   81 0000002C F000 F8B2       BLEQ             waitJ0Interrup
   82 00000030         
   83 00000030 2903            CMP              R1, #3
   84 00000032 BF08            IT               EQ
   85 00000034 F000 F8B4       BLEQ             waitMasterPword
   86 00000038         
   87 00000038 E7EC            B                MainLoop
   88 0000003A         
   89 0000003A         ;-------------------------------------------------------
                       -------------------------
   90 0000003A         ; Routine for entering a new password and close the safe
                       
   91 0000003A         newPword
   92 0000003A B500            PUSH{LR}
   93 0000003C F7FF FFFE       BL               readKeyboard
   94 00000040 F85D EB04       POP{LR}
   95 00000044         
   96 00000044 2800            CMP              R0, #NO_BTNS_PRESSED
   97 00000046 BF08            IT               EQ
   98 00000048 E037            BEQ              newPwordEnd
   99 0000004A         
  100 0000004A 2F04            CMP              R7, #4      ; i == 4
  101 0000004C BF08            IT               EQ
  102 0000004E E000            BEQ              newPwordHashtag
  103 00000050 E026            B                newPwordNewInput
  104 00000052         
  105 00000052         newPwordHashtag
  106 00000052 282A            CMP              R0, #'*'    ; R0 == '#'
  107 00000054 BF18            IT               NE
  108 00000056 E030            BNE              newPwordEnd
  109 00000058         
  110 00000058 B500            PUSH{LR}
  111 0000005A F44F 707A       MOV              R0, #1000
  112 0000005E F7FF FFFE       BL               SysTick_Wait1ms
  113 00000062         
  114 00000062 F7FF FFFE       BL               reset_LCD   ; Resets LCD before
                                                             next print
  115 00000066         
  116 00000066 48AE            LDR              R0, =MSG_CLOSING
  117 00000068 F04F 010E       MOV              R1, #14
  118 0000006C F7FF FFFE       BL               printArrayInLcd
  119 00000070         
  120 00000070 F241 3088       MOV              R0, #5000
  121 00000074 F7FF FFFE       BL               SysTick_Wait1ms
  122 00000078         
  123 00000078 F7FF FFFE       BL               reset_LCD   ; Resets LCD before
                                                             next print
  124 0000007C         
  125 0000007C 48A9            LDR              R0, =MSG_CLOSED
  126 0000007E F04F 010E       MOV              R1, #14
  127 00000082 F7FF FFFE       BL               printArrayInLcd
  128 00000086 F7FF FFFE       BL               pula_cursor_segunda_linha



ARM Macro Assembler    Page 4 


  129 0000008A         
  130 0000008A F04F 0700       MOV              R7, #0      ; i = 0
  131 0000008E F04F 0600       MOV              R6, #0      ; errorCtr = 0
  132 00000092 49A2            LDR              R1, =sysState
  133 00000094 F04F 0001       MOV              R0, #1
  134 00000098 7008            STRB             R0, [R1]
  135 0000009A F85D EB04       POP{LR}
  136 0000009E         
  137 0000009E E00C            B                newPwordEnd
  138 000000A0         
  139 000000A0         newPwordNewInput
  140 000000A0 49A1            LDR              R1, =currPword
  141 000000A2 4439            ADD              R1, R1, R7
  142 000000A4 7008            STRB             R0, [R1]    ; currPword[i] = R0
                                                            
  143 000000A6 F107 0701       ADD              R7, R7, #1  ; i++
  144 000000AA B500            PUSH{LR}
  145 000000AC F04F 0101       MOV              R1, #1
  146 000000B0 F7FF FFFE       BL               printArrayInLcd
  147 000000B4 F85D EB04       POP{LR}
  148 000000B8 E7FF            B                newPwordEnd
  149 000000BA         
  150 000000BA         newPwordEnd
  151 000000BA 4770            BX               LR
  152 000000BC         
  153 000000BC         ;-------------------------------------------------------
                       -------------------------
  154 000000BC         ; Routine for when the safe is closed: either opens or l
                       ocks permanently
  155 000000BC         closedSafe
  156 000000BC B500            PUSH{LR}
  157 000000BE F7FF FFFE       BL               readKeyboard
  158 000000C2 F85D EB04       POP{LR}
  159 000000C6         
  160 000000C6 2800            CMP              R0, #NO_BTNS_PRESSED
  161 000000C8 BF08            IT               EQ
  162 000000CA E062            BEQ              closedSafeEnd
  163 000000CC         
  164 000000CC 2F04            CMP              R7, #4      ; i == 4
  165 000000CE BF08            IT               EQ
  166 000000D0 E000            BEQ              closedSafeHashtag
  167 000000D2 E051            B                closedSafeNewInput
  168 000000D4         
  169 000000D4         closedSafeHashtag
  170 000000D4 282A            CMP              R0, #'*'    ; R0 == '#'
  171 000000D6 BF18            IT               NE
  172 000000D8 E05B            BNE              closedSafeEnd
  173 000000DA         
  174 000000DA 4893            LDR              R0, =currPword
  175 000000DC 4993            LDR              R1, =guessPword
  176 000000DE F04F 0204       MOV              R2, #4
  177 000000E2 B500            PUSH{LR}
  178 000000E4 F000 F8CA       BL               arraysCmp
  179 000000E8 F85D EB04       POP{LR}
  180 000000EC         
  181 000000EC 2801            CMP              R0, #1
  182 000000EE BF1A            ITTE             NE
  183 000000F0 2700            MOVNE            R7, #0      ; i = 0
  184 000000F2 1C76            ADDNE            R6, R6, #1  ; errorCtr++



ARM Macro Assembler    Page 5 


  185 000000F4 E003            BEQ              closedSafeOpenSafe
  186 000000F6         
  187 000000F6 2E03            CMP              R6, #3      ; errorCtr == 3
  188 000000F8 BF08            IT               EQ
  189 000000FA E020            BEQ              closedSafeLockSafe
  190 000000FC         
  191 000000FC E049            B                closedSafeEnd
  192 000000FE         
  193 000000FE         closedSafeOpenSafe
  194 000000FE B500            PUSH{LR}
  195 00000100 F7FF FFFE       BL               reset_LCD   ; Resets LCD before
                                                             next print
  196 00000104         
  197 00000104 488A            LDR              R0, =MSG_OPENING
  198 00000106 F04F 010D       MOV              R1, #13
  199 0000010A F7FF FFFE       BL               printArrayInLcd
  200 0000010E         
  201 0000010E F241 3088       MOV              R0, #5000
  202 00000112 F7FF FFFE       BL               SysTick_Wait1ms
  203 00000116         
  204 00000116 F7FF FFFE       BL               reset_LCD   ; Resets LCD before
                                                             next print
  205 0000011A         
  206 0000011A 4886            LDR              R0, =MSG_OPEN
  207 0000011C F04F 010C       MOV              R1, #12
  208 00000120 F7FF FFFE       BL               printArrayInLcd
  209 00000124 F7FF FFFE       BL               pula_cursor_segunda_linha
  210 00000128         
  211 00000128 F04F 0700       MOV              R7, #0      ; i = 0
  212 0000012C F04F 0600       MOV              R6, #0      ; errorCtr = 0
  213 00000130 497A            LDR              R1, =sysState
  214 00000132 F04F 0000       MOV              R0, #0
  215 00000136 7008            STRB             R0, [R1]
  216 00000138 F85D EB04       POP{LR}
  217 0000013C         
  218 0000013C E029            B                closedSafeEnd
  219 0000013E         
  220 0000013E         closedSafeLockSafe
  221 0000013E B500            PUSH{LR}
  222 00000140 F7FF FFFE       BL               reset_LCD   ; Resets LCD before
                                                             next print
  223 00000144         
  224 00000144 487C            LDR              R0, =MSG_LOCKED
  225 00000146 F04F 010E       MOV              R1, #14
  226 0000014A F7FF FFFE       BL               printArrayInLcd
  227 0000014E F7FF FFFE       BL               pula_cursor_segunda_linha
  228 00000152         
  229 00000152 F241 3088       MOV              R0, #5000
  230 00000156 F7FF FFFE       BL               SysTick_Wait1ms
  231 0000015A         
  232 0000015A F04F 0700       MOV              R7, #0      ; i = 0
  233 0000015E F04F 0600       MOV              R6, #0      ; errorCtr = 0
  234 00000162 F04F 0300       MOV              R3, #0
  235 00000166 4971            LDR              R1, =guessPword
  236 00000168 600B            STR              R3, [R1]
  237 0000016A 496C            LDR              R1, =sysState
  238 0000016C F04F 0002       MOV              R0, #2
  239 00000170 7008            STRB             R0, [R1]
  240 00000172 F85D EB04       POP{LR}



ARM Macro Assembler    Page 6 


  241 00000176         
  242 00000176 E00C            B                closedSafeEnd
  243 00000178         
  244 00000178         closedSafeNewInput
  245 00000178 496C            LDR              R1, =guessPword
  246 0000017A 4439            ADD              R1, R1, R7
  247 0000017C 7008            STRB             R0, [R1]    ; guessPword[i] = R
                                                            0
  248 0000017E F107 0701       ADD              R7, R7, #1  ; i++
  249 00000182 B500            PUSH{LR}
  250 00000184 F04F 0101       MOV              R1, #1
  251 00000188 F7FF FFFE       BL               printArrayInLcd
  252 0000018C F85D EB04       POP{LR}
  253 00000190         
  254 00000190 E7FF            B                closedSafeEnd
  255 00000192         
  256 00000192         closedSafeEnd
  257 00000192 4770            BX               LR
  258 00000194         
  259 00000194         ;-------------------------------------------------------
                       -------------------------
  260 00000194         ; Routine that waits for a interruption and disables all
                        other funcions
  261 00000194         waitJ0Interrup
  262 00000194 B500            PUSH{LR}
  263 00000196 F000 F887       BL               Atualiza_LEDs
  264 0000019A F85D EB04       POP{LR}
  265 0000019E         
  266 0000019E 4770            BX               LR
  267 000001A0         
  268 000001A0         ;-------------------------------------------------------
                       -------------------------
  269 000001A0         ; Routine to check if the master password was correctly 
                       written
  270 000001A0         waitMasterPword
  271 000001A0 B500            PUSH{LR}
  272 000001A2 F7FF FFFE       BL               readKeyboard
  273 000001A6 F85D EB04       POP{LR}
  274 000001AA         
  275 000001AA 2800            CMP              R0, #NO_BTNS_PRESSED
  276 000001AC BF08            IT               EQ
  277 000001AE E03F            BEQ              waitMasterPwordEnd
  278 000001B0         
  279 000001B0 2F04            CMP              R7, #4      ; i == 4
  280 000001B2 BF08            IT               EQ
  281 000001B4 E000            BEQ              waitMasterPwordHashtag
  282 000001B6 E02E            B                waitMasterPwordNewInput
  283 000001B8         
  284 000001B8         waitMasterPwordHashtag
  285 000001B8 282A            CMP              R0, #'*'    ; R0 == '#'
  286 000001BA BF18            IT               NE
  287 000001BC E038            BNE              waitMasterPwordEnd
  288 000001BE         
  289 000001BE 485F            LDR              R0, =masterPword
  290 000001C0 495A            LDR              R1, =guessPword
  291 000001C2 F04F 0204       MOV              R2, #4
  292 000001C6 B500            PUSH{LR}
  293 000001C8 F000 F858       BL               arraysCmp
  294 000001CC F85D EB04       POP{LR}



ARM Macro Assembler    Page 7 


  295 000001D0         
  296 000001D0 2801            CMP              R0, #1
  297 000001D2 BF14            ITE              NE
  298 000001D4 2700            MOVNE            R7, #0      ; i = 0
  299 000001D6 E000            BEQ              waitMasterPwordOpenSafe
  300 000001D8         
  301 000001D8 E02A            B                waitMasterPwordEnd
  302 000001DA         
  303 000001DA         waitMasterPwordOpenSafe
  304 000001DA B500            PUSH{LR}
  305 000001DC F7FF FFFE       BL               reset_LCD   ; Resets LCD before
                                                             next print
  306 000001E0         
  307 000001E0 4853            LDR              R0, =MSG_OPENING
  308 000001E2 F04F 010D       MOV              R1, #13
  309 000001E6 F7FF FFFE       BL               printArrayInLcd
  310 000001EA         
  311 000001EA F241 3088       MOV              R0, #5000
  312 000001EE F7FF FFFE       BL               SysTick_Wait1ms
  313 000001F2 F85D EB04       POP{LR}
  314 000001F6         
  315 000001F6 F7FF FFFE       BL               reset_LCD   ; Resets LCD before
                                                             next print
  316 000001FA         
  317 000001FA 484E            LDR              R0, =MSG_OPEN
  318 000001FC F04F 010C       MOV              R1, #12
  319 00000200 F7FF FFFE       BL               printArrayInLcd
  320 00000204 F7FF FFFE       BL               pula_cursor_segunda_linha
  321 00000208         
  322 00000208 F04F 0700       MOV              R7, #0      ; i = 0
  323 0000020C 4943            LDR              R1, =sysState
  324 0000020E F04F 0000       MOV              R0, #0
  325 00000212 7008            STRB             R0, [R1]
  326 00000214         
  327 00000214 E00C            B                waitMasterPwordEnd
  328 00000216         
  329 00000216         waitMasterPwordNewInput
  330 00000216 4945            LDR              R1, =guessPword
  331 00000218 4439            ADD              R1, R1, R7
  332 0000021A 7008            STRB             R0, [R1]    ; guessPword[i] = R
                                                            0
  333 0000021C F107 0701       ADD              R7, R7, #1  ; i++
  334 00000220         
  335 00000220 B500            PUSH{LR}
  336 00000222 F04F 0101       MOV              R1, #1
  337 00000226 F7FF FFFE       BL               printArrayInLcd
  338 0000022A F85D EB04       POP{LR}
  339 0000022E         
  340 0000022E E7FF            B                waitMasterPwordEnd
  341 00000230         
  342 00000230         waitMasterPwordEnd
  343 00000230 4770            BX               LR
  344 00000232         
  345 00000232         ;-------------------------------------------------------
                       -------------------------
  346 00000232         ; Initializes variables before the main loop
  347 00000232         InitilizeVars
  348 00000232 4942            LDR              R1, =masterPword
  349 00000234 F243 4231       MOV              R2, #0x3431



ARM Macro Assembler    Page 8 


  350 00000238 F2C3 7237       MOVT             R2, #0x3737
  351 0000023C 600A            STR              R2, [R1]
  352 0000023E         
  353 0000023E F04F 0200       MOV              R2, #0
  354 00000242 4936            LDR              R1, =sysState
  355 00000244 700A            STRB             R2, [R1]
  356 00000246 4938            LDR              R1, =currPword
  357 00000248 600A            STR              R2, [R1]
  358 0000024A 4938            LDR              R1, =guessPword
  359 0000024C 600A            STR              R2, [R1]
  360 0000024E 493E            LDR              R1, =lcdString
  361 00000250 600A            STR              R2, [R1]
  362 00000252         
  363 00000252 F04F 0600       MOV              R6, #0      ; errorCtr
  364 00000256 F04F 0700       MOV              R7, #0      ; Iterator for pass
                                                            words
  365 0000025A F04F 0800       MOV              R8, #0      ; Iterator for LCD
  366 0000025E F04F 0932       MOV              R9, #50
  367 00000262 F04F 0501       MOV              R5, #1      ; blinkLeds input(O
                                                            N/OFF)
  368 00000266         
  369 00000266 4833            LDR              R0, =MSG_OPEN
  370 00000268 F04F 010C       MOV              R1, #12
  371 0000026C B500            PUSH{LR}
  372 0000026E F7FF FFFE       BL               printArrayInLcd
  373 00000272 F7FF FFFE       BL               pula_cursor_segunda_linha
  374 00000276 F85D EB04       POP{LR}
  375 0000027A         
  376 0000027A 4770            BX               LR
  377 0000027C         
  378 0000027C         ;-------------------------------------------------------
                       -------------------------
  379 0000027C         ; Verifies if two arrays are equal
  380 0000027C         ; Input:  R0 = array1 starting address
  381 0000027C         ;         R1 = array2 starting address
  382 0000027C         ;    R2 = array size
  383 0000027C         ; Output: R0 = 1 if the arrays are equal, 0 if not
  384 0000027C         arraysCmp
  385 0000027C 2A00            CMP              R2, #0
  386 0000027E BF04            ITT              EQ
  387 00000280 2001            MOVEQ            R0, #1
  388 00000282 E009            BEQ              arraysCmpEnd
  389 00000284         
  390 00000284 F810 3B01       LDRB             R3, [R0], #1
  391 00000288 F811 4B01       LDRB             R4, [R1], #1
  392 0000028C 42A3            CMP              R3, R4
  393 0000028E BF1C            ITT              NE
  394 00000290 2000            MOVNE            R0, #0
  395 00000292 E001            BNE              arraysCmpEnd
  396 00000294         
  397 00000294 1E52            SUBS             R2, R2, #1
  398 00000296 E7F1            B                arraysCmp
  399 00000298         
  400 00000298         arraysCmpEnd
  401 00000298 4770            BX               LR
  402 0000029A         
  403 0000029A         ;-------------------------------------------------------
                       -------------------------
  404 0000029A         ; Verifies if the interruption should change state



ARM Macro Assembler    Page 9 


  405 0000029A         checkJ0Interrup
  406 0000029A 4820            LDR              R0, =sysState
  407 0000029C 7801            LDRB             R1, [R0]
  408 0000029E 2902            CMP              R1, #2
  409 000002A0 BF04            ITT              EQ
  410 000002A2 2103            MOVEQ            R1, #3
  411 000002A4 7001            STRBEQ           R1, [R0]
  412 000002A6         
  413 000002A6 4770            BX               LR
  414 000002A8         
  415 000002A8         Atualiza_LEDs
  416 000002A8 B500            PUSH             { LR }
  417 000002AA F7FF FFFE       BL               blinkLEDs
  418 000002AE F85D EB04       POP              { LR }
  419 000002B2 F1A9 0901       SUB              R9, #1
  420 000002B6 F1B9 0F00       CMP              R9, #0
  421 000002BA D109            BNE              Atualiza_LEDsEnd
  422 000002BC F04F 0932       MOV              R9, #50
  423 000002C0 F84D 8D04       PUSH             { R8 }
  424 000002C4 F04F 38FF       MOV              R8, #-1
  425 000002C8 FB05 F508       MUL              R5,R8
  426 000002CC F85D 8B04       POP              { R8 }
  427 000002D0         
  428 000002D0         Atualiza_LEDsEnd
  429 000002D0 4770            BX               LR
  430 000002D2         
  431 000002D2         ; ------------------------------------------------------
                       --------------------------------------------------------
                       -----------
  432 000002D2         ; Fim do Arquivo
  433 000002D2         ; ------------------------------------------------------
                       --------------------------------------------------------
                       ----------- 
  434 000002D2         
  435 000002D2 43 6F 66 
              72 65 20 
              41 62 65 
              72 74 6F 
              00       MSG_OPEN
                               DCB              "Cofre Aberto", 0
  436 000002DF 43 6F 66 
              72 65 20 
              41 62 72 
              69 6E 64 
              6F 00    MSG_OPENING
                               DCB              "Cofre Abrindo", 0
  437 000002ED 43 6F 66 
              72 65 20 
              46 65 63 
              68 61 6E 
              64 6F 00 MSG_CLOSING
                               DCB              "Cofre Fechando", 0
  438 000002FC 43 6F 66 
              72 65 20 
              46 65 63 
              68 61 64 
              6F 2E 00 MSG_CLOSED
                               DCB              "Cofre Fechado.", 0
  439 0000030B 43 6F 66 



ARM Macro Assembler    Page 10 


              72 65 20 
              54 72 61 
              76 61 64 
              6F 2E 00 MSG_LOCKED
                               DCB              "Cofre Travado.", 0
  440 0000031A         
  441 0000031A 00 00           ALIGN                        ;Garante que o fim 
                                                            da secao esta alinh
                                                            ada 
  442 0000031C                 END                          ;Fim do arquivo
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931,A1950W --cpu=Cortex-M4.fp.sp 
--depend=.\objects\main.d -o.\objects\main.o -IC:\Users\joaov\AppData\Local\Arm
\Packs\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C129 --predefine="__EVAL SETA 1" -
-predefine="__UVISION_VERSION SETA 538" --predefine="TM4C1294NCPDT SETA 1" --li
st=.\listings\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DATA 00000000

Symbol: DATA
   Definitions
      At line 21 in file main.s
   Uses
      None
Comment: DATA unused
currPword 00000005

Symbol: currPword
   Definitions
      At line 31 in file main.s
   Uses
      At line 140 in file main.s
      At line 174 in file main.s
      At line 356 in file main.s

guessPword 00000009

Symbol: guessPword
   Definitions
      At line 32 in file main.s
   Uses
      At line 175 in file main.s
      At line 235 in file main.s
      At line 245 in file main.s
      At line 290 in file main.s
      At line 330 in file main.s
      At line 358 in file main.s

lcdString 0000000D

Symbol: lcdString
   Definitions
      At line 33 in file main.s
   Uses
      At line 360 in file main.s
Comment: lcdString used once
masterPword 00000001

Symbol: masterPword
   Definitions
      At line 30 in file main.s
   Uses
      At line 289 in file main.s
      At line 348 in file main.s

sysState 00000000

Symbol: sysState
   Definitions
      At line 29 in file main.s
   Uses
      At line 68 in file main.s
      At line 132 in file main.s
      At line 213 in file main.s
      At line 237 in file main.s
      At line 323 in file main.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      At line 354 in file main.s
      At line 406 in file main.s

6 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 37 in file main.s
   Uses
      None
Comment: .text unused
Atualiza_LEDs 000002A8

Symbol: Atualiza_LEDs
   Definitions
      At line 415 in file main.s
   Uses
      At line 263 in file main.s
Comment: Atualiza_LEDs used once
Atualiza_LEDsEnd 000002D0

Symbol: Atualiza_LEDsEnd
   Definitions
      At line 428 in file main.s
   Uses
      At line 421 in file main.s
Comment: Atualiza_LEDsEnd used once
InitilizeVars 00000232

Symbol: InitilizeVars
   Definitions
      At line 347 in file main.s
   Uses
      At line 65 in file main.s
Comment: InitilizeVars used once
MSG_CLOSED 000002FC

Symbol: MSG_CLOSED
   Definitions
      At line 438 in file main.s
   Uses
      At line 125 in file main.s
Comment: MSG_CLOSED used once
MSG_CLOSING 000002ED

Symbol: MSG_CLOSING
   Definitions
      At line 437 in file main.s
   Uses
      At line 116 in file main.s
Comment: MSG_CLOSING used once
MSG_LOCKED 0000030B

Symbol: MSG_LOCKED
   Definitions
      At line 439 in file main.s
   Uses
      At line 224 in file main.s
Comment: MSG_LOCKED used once
MSG_OPEN 000002D2

Symbol: MSG_OPEN



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 435 in file main.s
   Uses
      At line 206 in file main.s
      At line 317 in file main.s
      At line 369 in file main.s

MSG_OPENING 000002DF

Symbol: MSG_OPENING
   Definitions
      At line 436 in file main.s
   Uses
      At line 197 in file main.s
      At line 307 in file main.s

MainLoop 00000014

Symbol: MainLoop
   Definitions
      At line 67 in file main.s
   Uses
      At line 87 in file main.s
Comment: MainLoop used once
Start 00000000

Symbol: Start
   Definitions
      At line 60 in file main.s
   Uses
      At line 40 in file main.s
Comment: Start used once
arraysCmp 0000027C

Symbol: arraysCmp
   Definitions
      At line 384 in file main.s
   Uses
      At line 178 in file main.s
      At line 293 in file main.s
      At line 398 in file main.s

arraysCmpEnd 00000298

Symbol: arraysCmpEnd
   Definitions
      At line 400 in file main.s
   Uses
      At line 388 in file main.s
      At line 395 in file main.s

checkJ0Interrup 0000029A

Symbol: checkJ0Interrup
   Definitions
      At line 405 in file main.s
   Uses
      At line 41 in file main.s
Comment: checkJ0Interrup used once



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

closedSafe 000000BC

Symbol: closedSafe
   Definitions
      At line 155 in file main.s
   Uses
      At line 77 in file main.s
Comment: closedSafe used once
closedSafeEnd 00000192

Symbol: closedSafeEnd
   Definitions
      At line 256 in file main.s
   Uses
      At line 162 in file main.s
      At line 172 in file main.s
      At line 191 in file main.s
      At line 218 in file main.s
      At line 242 in file main.s
      At line 254 in file main.s

closedSafeHashtag 000000D4

Symbol: closedSafeHashtag
   Definitions
      At line 169 in file main.s
   Uses
      At line 166 in file main.s
Comment: closedSafeHashtag used once
closedSafeLockSafe 0000013E

Symbol: closedSafeLockSafe
   Definitions
      At line 220 in file main.s
   Uses
      At line 189 in file main.s
Comment: closedSafeLockSafe used once
closedSafeNewInput 00000178

Symbol: closedSafeNewInput
   Definitions
      At line 244 in file main.s
   Uses
      At line 167 in file main.s
Comment: closedSafeNewInput used once
closedSafeOpenSafe 000000FE

Symbol: closedSafeOpenSafe
   Definitions
      At line 193 in file main.s
   Uses
      At line 185 in file main.s
Comment: closedSafeOpenSafe used once
newPword 0000003A

Symbol: newPword
   Definitions
      At line 91 in file main.s
   Uses



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

      At line 73 in file main.s
Comment: newPword used once
newPwordEnd 000000BA

Symbol: newPwordEnd
   Definitions
      At line 150 in file main.s
   Uses
      At line 98 in file main.s
      At line 108 in file main.s
      At line 137 in file main.s
      At line 148 in file main.s

newPwordHashtag 00000052

Symbol: newPwordHashtag
   Definitions
      At line 105 in file main.s
   Uses
      At line 102 in file main.s
Comment: newPwordHashtag used once
newPwordNewInput 000000A0

Symbol: newPwordNewInput
   Definitions
      At line 139 in file main.s
   Uses
      At line 103 in file main.s
Comment: newPwordNewInput used once
waitJ0Interrup 00000194

Symbol: waitJ0Interrup
   Definitions
      At line 261 in file main.s
   Uses
      At line 81 in file main.s
Comment: waitJ0Interrup used once
waitMasterPword 000001A0

Symbol: waitMasterPword
   Definitions
      At line 270 in file main.s
   Uses
      At line 85 in file main.s
Comment: waitMasterPword used once
waitMasterPwordEnd 00000230

Symbol: waitMasterPwordEnd
   Definitions
      At line 342 in file main.s
   Uses
      At line 277 in file main.s
      At line 287 in file main.s
      At line 301 in file main.s
      At line 327 in file main.s
      At line 340 in file main.s

waitMasterPwordHashtag 000001B8




ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

Symbol: waitMasterPwordHashtag
   Definitions
      At line 284 in file main.s
   Uses
      At line 281 in file main.s
Comment: waitMasterPwordHashtag used once
waitMasterPwordNewInput 00000216

Symbol: waitMasterPwordNewInput
   Definitions
      At line 329 in file main.s
   Uses
      At line 282 in file main.s
Comment: waitMasterPwordNewInput used once
waitMasterPwordOpenSafe 000001DA

Symbol: waitMasterPwordOpenSafe
   Definitions
      At line 303 in file main.s
   Uses
      At line 299 in file main.s
Comment: waitMasterPwordOpenSafe used once
30 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NO_BTNS_PRESSED 00000000

Symbol: NO_BTNS_PRESSED
   Definitions
      At line 18 in file main.s
   Uses
      At line 96 in file main.s
      At line 160 in file main.s
      At line 275 in file main.s

1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

GPIO_Init 00000000

Symbol: GPIO_Init
   Definitions
      At line 49 in file main.s
   Uses
      At line 63 in file main.s
Comment: GPIO_Init used once
PLL_Init 00000000

Symbol: PLL_Init
   Definitions
      At line 46 in file main.s
   Uses
      At line 61 in file main.s
Comment: PLL_Init used once
SysTick_Init 00000000

Symbol: SysTick_Init
   Definitions
      At line 47 in file main.s
   Uses
      At line 62 in file main.s
Comment: SysTick_Init used once
SysTick_Wait1ms 00000000

Symbol: SysTick_Wait1ms
   Definitions
      At line 48 in file main.s
   Uses
      At line 112 in file main.s
      At line 121 in file main.s
      At line 202 in file main.s
      At line 230 in file main.s
      At line 312 in file main.s

blinkLEDs 00000000

Symbol: blinkLEDs
   Definitions
      At line 54 in file main.s
   Uses
      At line 417 in file main.s
Comment: blinkLEDs used once
lcd_init 00000000

Symbol: lcd_init
   Definitions
      At line 51 in file main.s
   Uses
      At line 64 in file main.s
Comment: lcd_init used once
printArrayInLcd 00000000

Symbol: printArrayInLcd
   Definitions
      At line 52 in file main.s
   Uses
      At line 118 in file main.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

      At line 127 in file main.s
      At line 146 in file main.s
      At line 199 in file main.s
      At line 208 in file main.s
      At line 226 in file main.s
      At line 251 in file main.s
      At line 309 in file main.s
      At line 319 in file main.s
      At line 337 in file main.s
      At line 372 in file main.s

pula_cursor_segunda_linha 00000000

Symbol: pula_cursor_segunda_linha
   Definitions
      At line 56 in file main.s
   Uses
      At line 128 in file main.s
      At line 209 in file main.s
      At line 227 in file main.s
      At line 320 in file main.s
      At line 373 in file main.s

readKeyboard 00000000

Symbol: readKeyboard
   Definitions
      At line 53 in file main.s
   Uses
      At line 93 in file main.s
      At line 157 in file main.s
      At line 272 in file main.s

reset_LCD 00000000

Symbol: reset_LCD
   Definitions
      At line 55 in file main.s
   Uses
      At line 114 in file main.s
      At line 123 in file main.s
      At line 195 in file main.s
      At line 204 in file main.s
      At line 222 in file main.s
      At line 305 in file main.s
      At line 315 in file main.s

10 symbols
383 symbols in table
