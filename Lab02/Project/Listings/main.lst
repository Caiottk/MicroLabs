


ARM Macro Assembler    Page 1 


    1 00000000         ; main.s
    2 00000000         ; Desenvolvido para a placa EK-TM4C1294XL
    3 00000000         ; Prof. Guilherme Peron
    4 00000000         ; Ver 1 19/03/2018
    5 00000000         ; Ver 2 26/08/2018
    6 00000000         ; Este programa deve esperar o usuário pressionar uma ch
                       ave.
    7 00000000         ; Caso o usuário pressione uma chave, um LED deve piscar
                        a cada 1 segundo.
    8 00000000         
    9 00000000         ; ------------------------------------------------------
                       -------------------------
   10 00000000                 THUMB                        ; Instruções do tip
                                                            o Thumb-2
   11 00000000         ; ------------------------------------------------------
                       -------------------------
   12 00000000         
   13 00000000         ; Declarações EQU - Defines
   14 00000000         ;<NOME>         EQU <VALOR>
   15 00000000         ; ========================
   16 00000000         ; Definições de Valores
   17 00000000         
   18 00000000 00000000 
                       NO_BTNS_PRESSED
                               EQU              0
   19 00000000         ; ------------------------------------------------------
                       -------------------------
   20 00000000         ; Área de Dados - Declarações de variáveis
   21 00000000                 AREA             DATA, ALIGN=2
   22 00000000         ; Se alguma variável for chamada em outro arquivo
   23 00000000         ;EXPORT  <var> [DATA,SIZE=<tam>]   ; Permite chamar a va
                       riável <var> a 
   24 00000000         ; partir de outro arquivo
   25 00000000         ;<var> SPACE <tam>                        ; Declara uma 
                       variável de nome <var>
   26 00000000         ; de <tam> bytes a partir da primeira 
   27 00000000         ; posição da RAM  
   28 00000000 00      sysState
                               SPACE            0x1
   29 00000001 00 00 00 
              00       masterPword
                               SPACE            0x4
   30 00000005 00 00 00 
              00       currPword
                               SPACE            0x4
   31 00000009 00 00 00 
              00       guessPword
                               SPACE            0x4
   32 0000000D 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    lcdString



ARM Macro Assembler    Page 2 


                               SPACE            0x20
   33 0000002D         ; ------------------------------------------------------
                       -------------------------
   34 0000002D         ; Área de Código - Tudo abaixo da diretiva a seguir será
                        armazenado na memória de 
   35 0000002D         ;                  código
   36 0000002D                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   37 00000000         
   38 00000000         ; Se alguma função do arquivo for chamada em outro arqui
                       vo 
   39 00000000                 EXPORT           Start       ; Permite chamar a 
                                                            função Start a part
                                                            ir de 
   40 00000000         ; outro arquivo. No caso startup.s
   41 00000000         
   42 00000000         ; Se chamar alguma função externa 
   43 00000000         ;IMPORT <func>              ; Permite chamar dentro dest
                       e arquivo uma 
   44 00000000         ; função <func>
   45 00000000                 IMPORT           PLL_Init
   46 00000000                 IMPORT           SysTick_Init
   47 00000000                 IMPORT           SysTick_Wait1ms
   48 00000000                 IMPORT           GPIO_Init
   49 00000000                 IMPORT           LightUpLEDs
   50 00000000                 IMPORT           GetPushBtnsState
   51 00000000                 IMPORT           DisableAllLEDs
   52 00000000                 IMPORT           printArrayInLcd
   53 00000000                 IMPORT           readKeyboard
   54 00000000                 IMPORT           blinkLEDs
   55 00000000         
   56 00000000         ; ------------------------------------------------------
                       -------------------------
   57 00000000         ; Função main()
   58 00000000         Start
   59 00000000 43 6F 66 
              72 65 20 
              41 62 65 
              72 74 6F 
              2C 20 64 
              69 67 69 
              74 65 20 
              6E 6F 76 
              61 20 73 
              65 6E 68 
              61 00    MSG_OPEN
                               DCB              "Cofre Aberto, digite nova senh
a", 0
   60 00000020 43 6F 66 
              72 65 20 
              41 62 72 
              69 6E 64 
              6F 2E 2E 
              2E 00    MSG_OPENING
                               DCB              "Cofre Abrindo...", 0
   61 00000031 43 6F 66 
              72 65 20 
              46 65 63 
              68 61 6E 



ARM Macro Assembler    Page 3 


              64 6F 2E 
              2E 2E 00 MSG_CLOSING
                               DCB              "Cofre Fechando...", 0
   62 00000043 43 6F 66 
              72 65 20 
              46 65 63 
              68 61 64 
              6F 00    MSG_CLOSED
                               DCB              "Cofre Fechado", 0
   63 00000051 43 6F 66 
              72 65 20 
              54 72 61 
              76 61 64 
              6F 2E 00 MSG_LOCKED
                               DCB              "Cofre Travado.", 0
   64 00000060 F7FF FFFE       BL               PLL_Init    ;Chama a subrotina 
                                                            para alterar o cloc
                                                            k do microcontrolad
                                                            or para 80MHz
   65 00000064 F7FF FFFE       BL               SysTick_Init ;Chama a subrotina
                                                             para inicializar o
                                                             SysTick
   66 00000068 F7FF FFFE       BL               GPIO_Init   ;Chama a subrotina 
                                                            que inicializa os G
                                                            PIO
   67 0000006C F000 F8DC       BL               InitilizeVars
   68 00000070         ;-------------------------------------------------------
                       -------------------------
   69 00000070         MainLoop
   70 00000070 497D            LDR              R1, =sysState
   71 00000072 6809            LDR              R1, [R1]
   72 00000074         
   73 00000074 2900            CMP              R1, #0
   74 00000076 BF08            IT               EQ
   75 00000078 F000 F80D       BLEQ             newPword
   76 0000007C         
   77 0000007C 2901            CMP              R1, #1
   78 0000007E BF08            IT               EQ
   79 00000080 F000 F83D       BLEQ             closedSafe
   80 00000084         
   81 00000084 2902            CMP              R1, #2
   82 00000086 BF08            IT               EQ
   83 00000088 F000 F893       BLEQ             waitJ0Interrup
   84 0000008C         
   85 0000008C 2901            CMP              R1, #1
   86 0000008E BF08            IT               EQ
   87 00000090 F000 F89A       BLEQ             waitMasterPword
   88 00000094         
   89 00000094 E7EC            B                MainLoop
   90 00000096         
   91 00000096         ;-------------------------------------------------------
                       -------------------------
   92 00000096         ; Routine for entering a new password and close the safe
                       
   93 00000096         newPword
   94 00000096 4875            LDR              R0, =MSG_OPEN
   95 00000098 F04F 011F       MOV              R1, #31
   96 0000009C B500            PUSH{LR}
   97 0000009E F7FF FFFE       BL               printArrayInLcd



ARM Macro Assembler    Page 4 


   98 000000A2 F7FF FFFE       BL               readKeyboard
   99 000000A6 F85D EB04       POP{LR}
  100 000000AA         
  101 000000AA 2800            CMP              R0, #NO_BTNS_PRESSED
  102 000000AC BF08            IT               EQ
  103 000000AE E025            BEQ              newPwordEnd
  104 000000B0         
  105 000000B0 2F04            CMP              R7, #4      ; i == 4
  106 000000B2 BF08            IT               EQ
  107 000000B4 E000            BEQ              newPwordHashtag
  108 000000B6 E01B            B                newPwordNewInput
  109 000000B8         
  110 000000B8         newPwordHashtag
  111 000000B8 2823            CMP              R0, #0x23   ; R0 == '#'
  112 000000BA BF18            IT               NE
  113 000000BC E01E            BNE              newPwordEnd
  114 000000BE         
  115 000000BE B500            PUSH{LR}
  116 000000C0 F44F 707A       MOV              R0, #1000
  117 000000C4 F7FF FFFE       BL               SysTick_Wait1ms
  118 000000C8         
  119 000000C8 4869            LDR              R0, =MSG_CLOSING
  120 000000CA F04F 0111       MOV              R1, #17
  121 000000CE F7FF FFFE       BL               printArrayInLcd
  122 000000D2         
  123 000000D2 F241 3088       MOV              R0, #5000
  124 000000D6 F7FF FFFE       BL               SysTick_Wait1ms
  125 000000DA         
  126 000000DA F04F 0700       MOV              R7, #0      ; i = 0
  127 000000DE F04F 0600       MOV              R6, #0      ; errorCtr = 0
  128 000000E2 4961            LDR              R1, =sysState
  129 000000E4 F04F 0001       MOV              R0, #1
  130 000000E8 7008            STRB             R0, [R1]
  131 000000EA F85D EB04       POP{LR}
  132 000000EE         
  133 000000EE E005            B                newPwordEnd
  134 000000F0         
  135 000000F0         newPwordNewInput
  136 000000F0 4960            LDR              R1, =currPword
  137 000000F2 4439            ADD              R1, R1, R7
  138 000000F4 7008            STRB             R0, [R1]    ; currPword[i] = R0
                                                            
  139 000000F6 F107 0701       ADD              R7, R7, #1  ; i++
  140 000000FA         
  141 000000FA E7FF            B                newPwordEnd
  142 000000FC         
  143 000000FC         newPwordEnd
  144 000000FC 4770            BX               LR
  145 000000FE         
  146 000000FE         ;-------------------------------------------------------
                       -------------------------
  147 000000FE         ; Routine for when the safe is closed: either opens or l
                       ocks permanently
  148 000000FE         closedSafe
  149 000000FE 485E            LDR              R0, =MSG_CLOSED
  150 00000100 F04F 010D       MOV              R1, #13
  151 00000104 B500            PUSH{LR}
  152 00000106 F7FF FFFE       BL               printArrayInLcd
  153 0000010A F7FF FFFE       BL               readKeyboard



ARM Macro Assembler    Page 5 


  154 0000010E F85D EB04       POP{LR}
  155 00000112         
  156 00000112 2800            CMP              R0, #NO_BTNS_PRESSED
  157 00000114 BF08            IT               EQ
  158 00000116 E04B            BEQ              closedSafeEnd
  159 00000118         
  160 00000118 2F04            CMP              R7, #4      ; i == 4
  161 0000011A BF08            IT               EQ
  162 0000011C E000            BEQ              closedSafeHashtag
  163 0000011E E041            B                closedSafeNewInput
  164 00000120         
  165 00000120         closedSafeHashtag
  166 00000120 2823            CMP              R0, #0x23   ; R0 == '#'
  167 00000122 BF18            IT               NE
  168 00000124 E044            BNE              closedSafeEnd
  169 00000126         
  170 00000126 4853            LDR              R0, =currPword
  171 00000128 4954            LDR              R1, =guessPword
  172 0000012A F04F 0204       MOV              R2, #4
  173 0000012E B500            PUSH{LR}
  174 00000130 F000 F883       BL               arraysCmp
  175 00000134 F85D EB04       POP{LR}
  176 00000138         
  177 00000138 2801            CMP              R0, #1
  178 0000013A BF1A            ITTE             NE
  179 0000013C 2700            MOVNE            R7, #0      ; i = 0
  180 0000013E 1C76            ADDNE            R6, R6, #1  ; errorCtr++
  181 00000140 E003            BEQ              closedSafeOpenSafe
  182 00000142         
  183 00000142 2E03            CMP              R6, #3      ; errorCtr == 3
  184 00000144 BF08            IT               EQ
  185 00000146 E014            BEQ              closedSafeLockSafe
  186 00000148         
  187 00000148 E032            B                closedSafeEnd
  188 0000014A         
  189 0000014A         closedSafeOpenSafe
  190 0000014A B500            PUSH{LR}
  191 0000014C 484C            LDR              R0, =MSG_OPENING
  192 0000014E F04F 0110       MOV              R1, #16
  193 00000152 F7FF FFFE       BL               printArrayInLcd
  194 00000156         
  195 00000156 F241 3088       MOV              R0, #5000
  196 0000015A F7FF FFFE       BL               SysTick_Wait1ms
  197 0000015E         
  198 0000015E F04F 0700       MOV              R7, #0      ; i = 0
  199 00000162 F04F 0600       MOV              R6, #0      ; errorCtr = 0
  200 00000166 4940            LDR              R1, =sysState
  201 00000168 F04F 0000       MOV              R0, #0
  202 0000016C 7008            STRB             R0, [R1]
  203 0000016E F85D EB04       POP{LR}
  204 00000172         
  205 00000172         closedSafeLockSafe
  206 00000172 B500            PUSH{LR}
  207 00000174 4843            LDR              R0, =MSG_LOCKED
  208 00000176 F04F 010E       MOV              R1, #14
  209 0000017A F7FF FFFE       BL               printArrayInLcd
  210 0000017E         
  211 0000017E F241 3088       MOV              R0, #5000
  212 00000182 F7FF FFFE       BL               SysTick_Wait1ms



ARM Macro Assembler    Page 6 


  213 00000186         
  214 00000186 F04F 0700       MOV              R7, #0      ; i = 0
  215 0000018A F04F 0600       MOV              R6, #0      ; errorCtr = 0
  216 0000018E F04F 0300       MOV              R3, #0
  217 00000192 493A            LDR              R1, =guessPword
  218 00000194 600B            STR              R3, [R1]
  219 00000196 4934            LDR              R1, =sysState
  220 00000198 F04F 0002       MOV              R0, #2
  221 0000019C 7008            STRB             R0, [R1]
  222 0000019E F85D EB04       POP{LR}
  223 000001A2         
  224 000001A2 E005            B                closedSafeEnd
  225 000001A4         
  226 000001A4         closedSafeNewInput
  227 000001A4 4935            LDR              R1, =guessPword
  228 000001A6 4439            ADD              R1, R1, R7
  229 000001A8 7008            STRB             R0, [R1]    ; guessPword[i] = R
                                                            0
  230 000001AA F107 0701       ADD              R7, R7, #1  ; i++
  231 000001AE         
  232 000001AE E7FF            B                closedSafeEnd
  233 000001B0         
  234 000001B0         closedSafeEnd
  235 000001B0 4770            BX               LR
  236 000001B2         
  237 000001B2         ;-------------------------------------------------------
                       -------------------------
  238 000001B2         ; Routine that waits for a interruption and disables all
                        other funcions
  239 000001B2         waitJ0Interrup
  240 000001B2 4834            LDR              R0, =MSG_LOCKED
  241 000001B4 F04F 010E       MOV              R1, #14
  242 000001B8 B500            PUSH{LR}
  243 000001BA F7FF FFFE       BL               printArrayInLcd
  244 000001BE F7FF FFFE       BL               blinkLEDs
  245 000001C2 F85D EB04       POP{LR}
  246 000001C6         
  247 000001C6 4770            BX               LR
  248 000001C8         
  249 000001C8         ;-------------------------------------------------------
                       -------------------------
  250 000001C8         ; Routine to check if the master password was correctly 
                       written
  251 000001C8         waitMasterPword
  252 000001C8 482E            LDR              R0, =MSG_LOCKED
  253 000001CA F04F 010E       MOV              R1, #14
  254 000001CE B500            PUSH{LR}
  255 000001D0 F7FF FFFE       BL               printArrayInLcd
  256 000001D4 F7FF FFFE       BL               readKeyboard
  257 000001D8 F85D EB04       POP{LR}
  258 000001DC         
  259 000001DC 2800            CMP              R0, #NO_BTNS_PRESSED
  260 000001DE BF08            IT               EQ
  261 000001E0 E021            BEQ              waitMasterPwordEnd
  262 000001E2         
  263 000001E2 2F04            CMP              R7, #4      ; i == 4
  264 000001E4 BF08            IT               EQ
  265 000001E6 E000            BEQ              waitMasterPwordHashtag
  266 000001E8 E017            B                waitMasterPwordNewInput



ARM Macro Assembler    Page 7 


  267 000001EA         
  268 000001EA         waitMasterPwordHashtag
  269 000001EA 2823            CMP              R0, #0x23   ; R0 == '#'
  270 000001EC BF18            IT               NE
  271 000001EE E01A            BNE              waitMasterPwordEnd
  272 000001F0         
  273 000001F0 4825            LDR              R0, =masterPword
  274 000001F2 4922            LDR              R1, =guessPword
  275 000001F4 F04F 0204       MOV              R2, #4
  276 000001F8 B500            PUSH{LR}
  277 000001FA F000 F81E       BL               arraysCmp
  278 000001FE F85D EB04       POP{LR}
  279 00000202         
  280 00000202 2801            CMP              R0, #1
  281 00000204 BF14            ITE              NE
  282 00000206 2700            MOVNE            R7, #0      ; i = 0
  283 00000208 E000            BEQ              waitMasterPwordOpenSafe
  284 0000020A         
  285 0000020A E00C            B                waitMasterPwordEnd
  286 0000020C         
  287 0000020C         waitMasterPwordOpenSafe
  288 0000020C F04F 0700       MOV              R7, #0      ; i = 0
  289 00000210 4915            LDR              R1, =sysState
  290 00000212 F04F 0000       MOV              R0, #0
  291 00000216 7008            STRB             R0, [R1]
  292 00000218         
  293 00000218 E005            B                waitMasterPwordEnd
  294 0000021A         
  295 0000021A         waitMasterPwordNewInput
  296 0000021A 4918            LDR              R1, =guessPword
  297 0000021C 4439            ADD              R1, R1, R7
  298 0000021E 7008            STRB             R0, [R1]    ; guessPword[i] = R
                                                            0
  299 00000220 F107 0701       ADD              R7, R7, #1  ; i++
  300 00000224         
  301 00000224 E7FF            B                waitMasterPwordEnd
  302 00000226         
  303 00000226         waitMasterPwordEnd
  304 00000226 4770            BX               LR
  305 00000228         
  306 00000228         ;-------------------------------------------------------
                       -------------------------
  307 00000228         ; Initializes variables before the main loop
  308 00000228         InitilizeVars
  309 00000228 4917            LDR              R1, =masterPword
  310 0000022A F44F 7241       MOV              R2, #0x0304
  311 0000022E F2C0 1202       MOVT             R2, #0x0102
  312 00000232 600A            STR              R2, [R1]
  313 00000234         
  314 00000234 F04F 0700       MOV              R7, #0      ; Iterator for pass
                                                            words
  315 00000238         
  316 00000238 4770            BX               LR
  317 0000023A         
  318 0000023A         ;-------------------------------------------------------
                       -------------------------
  319 0000023A         ; Verifies if two arrays are equal
  320 0000023A         ; Input: R0 = array1 starting address
  321 0000023A         ;        R1 = array2 starting address



ARM Macro Assembler    Page 8 


  322 0000023A         ;     R2 = array size
  323 0000023A         ; Output: R0 = 1 if the arrays are equal, 0 if not
  324 0000023A         arraysCmp
  325 0000023A 2A00            CMP              R2, #0
  326 0000023C BF04            ITT              EQ
  327 0000023E 2001            MOVEQ            R0, #1
  328 00000240 E009            BEQ              arraysCmpEnd
  329 00000242         
  330 00000242 F810 3B01       LDRB             R3, [R0], #1
  331 00000246 F811 4B01       LDRB             R4, [R1], #1
  332 0000024A 42A3            CMP              R3, R4
  333 0000024C BF1C            ITT              NE
  334 0000024E 2000            MOVNE            R0, #0
  335 00000250 E001            BNE              arraysCmpEnd
  336 00000252         
  337 00000252 1E52            SUBS             R2, R2, #1
  338 00000254 E7F1            B                arraysCmp
  339 00000256         
  340 00000256         arraysCmpEnd
  341 00000256 4770            BX               LR
  342 00000258         
  343 00000258         ;-------------------------------------------------------
                       -------------------------
  344 00000258         ; Verifies if the interruption should change state
  345 00000258         checkJ0Interrup
  346 00000258 4803            LDR              R0, =sysState
  347 0000025A 7801            LDRB             R1, [R0]
  348 0000025C 2902            CMP              R1, #2
  349 0000025E BF04            ITT              EQ
  350 00000260 2103            MOVEQ            R1, #3
  351 00000262 7001            STRBEQ           R1, [R0]
  352 00000264         
  353 00000264 4770            BX               LR
  354 00000266         
  355 00000266         ; ------------------------------------------------------
                       --------------------------------------------------------
                       -----------
  356 00000266         ; Fim do Arquivo
  357 00000266         ; ------------------------------------------------------
                       --------------------------------------------------------
                       ----------- 
  358 00000266 00 00           ALIGN                        ;Garante que o fim 
                                                            da seção está alinh
                                                            ada 
  359 00000268                 END                          ;Fim do arquivo
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931,A1950W --cpu=Cortex-M4.fp.sp 
--depend=.\objects\main.d -o.\objects\main.o -IC:\Users\joaov\AppData\Local\Arm
\Packs\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C129 --predefine="__EVAL SETA 1" -
-predefine="__UVISION_VERSION SETA 538" --predefine="TM4C1294NCPDT SETA 1" --li
st=.\listings\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DATA 00000000

Symbol: DATA
   Definitions
      At line 21 in file main.s
   Uses
      None
Comment: DATA unused
currPword 00000005

Symbol: currPword
   Definitions
      At line 30 in file main.s
   Uses
      At line 136 in file main.s
      At line 170 in file main.s

guessPword 00000009

Symbol: guessPword
   Definitions
      At line 31 in file main.s
   Uses
      At line 171 in file main.s
      At line 217 in file main.s
      At line 227 in file main.s
      At line 274 in file main.s
      At line 296 in file main.s

lcdString 0000000D

Symbol: lcdString
   Definitions
      At line 32 in file main.s
   Uses
      None
Comment: lcdString unused
masterPword 00000001

Symbol: masterPword
   Definitions
      At line 29 in file main.s
   Uses
      At line 273 in file main.s
      At line 309 in file main.s

sysState 00000000

Symbol: sysState
   Definitions
      At line 28 in file main.s
   Uses
      At line 70 in file main.s
      At line 128 in file main.s
      At line 200 in file main.s
      At line 219 in file main.s
      At line 289 in file main.s
      At line 346 in file main.s




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

6 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 36 in file main.s
   Uses
      None
Comment: .text unused
InitilizeVars 00000228

Symbol: InitilizeVars
   Definitions
      At line 308 in file main.s
   Uses
      At line 67 in file main.s
Comment: InitilizeVars used once
MSG_CLOSED 00000043

Symbol: MSG_CLOSED
   Definitions
      At line 62 in file main.s
   Uses
      At line 149 in file main.s
Comment: MSG_CLOSED used once
MSG_CLOSING 00000031

Symbol: MSG_CLOSING
   Definitions
      At line 61 in file main.s
   Uses
      At line 119 in file main.s
Comment: MSG_CLOSING used once
MSG_LOCKED 00000051

Symbol: MSG_LOCKED
   Definitions
      At line 63 in file main.s
   Uses
      At line 207 in file main.s
      At line 240 in file main.s
      At line 252 in file main.s

MSG_OPEN 00000000

Symbol: MSG_OPEN
   Definitions
      At line 59 in file main.s
   Uses
      At line 94 in file main.s
Comment: MSG_OPEN used once
MSG_OPENING 00000020

Symbol: MSG_OPENING
   Definitions
      At line 60 in file main.s
   Uses
      At line 191 in file main.s
Comment: MSG_OPENING used once
MainLoop 00000070



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: MainLoop
   Definitions
      At line 69 in file main.s
   Uses
      At line 89 in file main.s
Comment: MainLoop used once
Start 00000000

Symbol: Start
   Definitions
      At line 58 in file main.s
   Uses
      At line 39 in file main.s
Comment: Start used once
arraysCmp 0000023A

Symbol: arraysCmp
   Definitions
      At line 324 in file main.s
   Uses
      At line 174 in file main.s
      At line 277 in file main.s
      At line 338 in file main.s

arraysCmpEnd 00000256

Symbol: arraysCmpEnd
   Definitions
      At line 340 in file main.s
   Uses
      At line 328 in file main.s
      At line 335 in file main.s

checkJ0Interrup 00000258

Symbol: checkJ0Interrup
   Definitions
      At line 345 in file main.s
   Uses
      None
Comment: checkJ0Interrup unused
closedSafe 000000FE

Symbol: closedSafe
   Definitions
      At line 148 in file main.s
   Uses
      At line 79 in file main.s
Comment: closedSafe used once
closedSafeEnd 000001B0

Symbol: closedSafeEnd
   Definitions
      At line 234 in file main.s
   Uses
      At line 158 in file main.s
      At line 168 in file main.s
      At line 187 in file main.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 224 in file main.s
      At line 232 in file main.s

closedSafeHashtag 00000120

Symbol: closedSafeHashtag
   Definitions
      At line 165 in file main.s
   Uses
      At line 162 in file main.s
Comment: closedSafeHashtag used once
closedSafeLockSafe 00000172

Symbol: closedSafeLockSafe
   Definitions
      At line 205 in file main.s
   Uses
      At line 185 in file main.s
Comment: closedSafeLockSafe used once
closedSafeNewInput 000001A4

Symbol: closedSafeNewInput
   Definitions
      At line 226 in file main.s
   Uses
      At line 163 in file main.s
Comment: closedSafeNewInput used once
closedSafeOpenSafe 0000014A

Symbol: closedSafeOpenSafe
   Definitions
      At line 189 in file main.s
   Uses
      At line 181 in file main.s
Comment: closedSafeOpenSafe used once
newPword 00000096

Symbol: newPword
   Definitions
      At line 93 in file main.s
   Uses
      At line 75 in file main.s
Comment: newPword used once
newPwordEnd 000000FC

Symbol: newPwordEnd
   Definitions
      At line 143 in file main.s
   Uses
      At line 103 in file main.s
      At line 113 in file main.s
      At line 133 in file main.s
      At line 141 in file main.s

newPwordHashtag 000000B8

Symbol: newPwordHashtag
   Definitions
      At line 110 in file main.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 107 in file main.s
Comment: newPwordHashtag used once
newPwordNewInput 000000F0

Symbol: newPwordNewInput
   Definitions
      At line 135 in file main.s
   Uses
      At line 108 in file main.s
Comment: newPwordNewInput used once
waitJ0Interrup 000001B2

Symbol: waitJ0Interrup
   Definitions
      At line 239 in file main.s
   Uses
      At line 83 in file main.s
Comment: waitJ0Interrup used once
waitMasterPword 000001C8

Symbol: waitMasterPword
   Definitions
      At line 251 in file main.s
   Uses
      At line 87 in file main.s
Comment: waitMasterPword used once
waitMasterPwordEnd 00000226

Symbol: waitMasterPwordEnd
   Definitions
      At line 303 in file main.s
   Uses
      At line 261 in file main.s
      At line 271 in file main.s
      At line 285 in file main.s
      At line 293 in file main.s
      At line 301 in file main.s

waitMasterPwordHashtag 000001EA

Symbol: waitMasterPwordHashtag
   Definitions
      At line 268 in file main.s
   Uses
      At line 265 in file main.s
Comment: waitMasterPwordHashtag used once
waitMasterPwordNewInput 0000021A

Symbol: waitMasterPwordNewInput
   Definitions
      At line 295 in file main.s
   Uses
      At line 266 in file main.s
Comment: waitMasterPwordNewInput used once
waitMasterPwordOpenSafe 0000020C

Symbol: waitMasterPwordOpenSafe
   Definitions



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

      At line 287 in file main.s
   Uses
      At line 283 in file main.s
Comment: waitMasterPwordOpenSafe used once
28 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NO_BTNS_PRESSED 00000000

Symbol: NO_BTNS_PRESSED
   Definitions
      At line 18 in file main.s
   Uses
      At line 101 in file main.s
      At line 156 in file main.s
      At line 259 in file main.s

1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

DisableAllLEDs 00000000

Symbol: DisableAllLEDs
   Definitions
      At line 51 in file main.s
   Uses
      None
Comment: DisableAllLEDs unused
GPIO_Init 00000000

Symbol: GPIO_Init
   Definitions
      At line 48 in file main.s
   Uses
      At line 66 in file main.s
Comment: GPIO_Init used once
GetPushBtnsState 00000000

Symbol: GetPushBtnsState
   Definitions
      At line 50 in file main.s
   Uses
      None
Comment: GetPushBtnsState unused
LightUpLEDs 00000000

Symbol: LightUpLEDs
   Definitions
      At line 49 in file main.s
   Uses
      None
Comment: LightUpLEDs unused
PLL_Init 00000000

Symbol: PLL_Init
   Definitions
      At line 45 in file main.s
   Uses
      At line 64 in file main.s
Comment: PLL_Init used once
SysTick_Init 00000000

Symbol: SysTick_Init
   Definitions
      At line 46 in file main.s
   Uses
      At line 65 in file main.s
Comment: SysTick_Init used once
SysTick_Wait1ms 00000000

Symbol: SysTick_Wait1ms
   Definitions
      At line 47 in file main.s
   Uses
      At line 117 in file main.s
      At line 124 in file main.s
      At line 196 in file main.s
      At line 212 in file main.s




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

blinkLEDs 00000000

Symbol: blinkLEDs
   Definitions
      At line 54 in file main.s
   Uses
      At line 244 in file main.s
Comment: blinkLEDs used once
printArrayInLcd 00000000

Symbol: printArrayInLcd
   Definitions
      At line 52 in file main.s
   Uses
      At line 97 in file main.s
      At line 121 in file main.s
      At line 152 in file main.s
      At line 193 in file main.s
      At line 209 in file main.s
      At line 243 in file main.s
      At line 255 in file main.s

readKeyboard 00000000

Symbol: readKeyboard
   Definitions
      At line 53 in file main.s
   Uses
      At line 98 in file main.s
      At line 153 in file main.s
      At line 256 in file main.s

10 symbols
381 symbols in table
