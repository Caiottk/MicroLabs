


ARM Macro Assembler    Page 1 


    1 00000000         ; main.s
    2 00000000         ; Desenvolvido para a placa EK-TM4C1294XL
    3 00000000         ; Prof. Guilherme Peron
    4 00000000         ; Ver 1 19/03/2018
    5 00000000         ; Ver 2 26/08/2018
    6 00000000         ; Este programa deve esperar o usuario pressionar uma ch
                       ave.
    7 00000000         ; Caso o usuario pressione uma chave, um LED deve piscar
                        a cada 1 segundo.
    8 00000000         
    9 00000000         ; ------------------------------------------------------
                       -------------------------
   10 00000000                 THUMB                        ; Instrucaes do tip
                                                            o Thumb-2
   11 00000000         ; ------------------------------------------------------
                       -------------------------
   12 00000000         
   13 00000000         ; Declaracaes EQU - Defines
   14 00000000         ;<NOME>         EQU <VALOR>
   15 00000000         ; ========================
   16 00000000         ; Definicaes de Valores
   17 00000000         
   18 00000000 00000000 
                       NO_BTNS_PRESSED
                               EQU              0
   19 00000000         ; ------------------------------------------------------
                       -------------------------
   20 00000000         ; area de Dados - Declaracaes de variaveis
   21 00000000                 AREA             DATA, ALIGN=2
   22 00000000         ; Se alguma variavel for chamada em outro arquivo
   23 00000000         ;EXPORT  <var> [DATA,SIZE=<tam>]   ; Permite chamar a va
                       riavel <var> a 
   24 00000000         ; partir de outro arquivo
   25 00000000         ;<var> SPACE <tam>                        ; Declara uma 
                       variavel de nome <var>
   26 00000000         ; de <tam> bytes a partir da primeira 
   27 00000000         ; posicao da RAM  
   28 00000000 00      sysState
                               SPACE            0x1
   29 00000001 00 00 00 
              00       masterPword
                               SPACE            0x4
   30 00000005 00 00 00 
              00       currPword
                               SPACE            0x4
   31 00000009 00 00 00 
              00       guessPword
                               SPACE            0x4
   32 0000000D 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    lcdString



ARM Macro Assembler    Page 2 


                               SPACE            0x20
   33 0000002D         ; ------------------------------------------------------
                       -------------------------
   34 0000002D         ; area de Cadigo - Tudo abaixo da diretiva a seguir sera
                        armazenado na memaria de 
   35 0000002D         ;                  cadigo
   36 0000002D                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   37 00000000         
   38 00000000         ; Se alguma funcao do arquivo for chamada em outro arqui
                       vo 
   39 00000000                 EXPORT           Start       ; Permite chamar a 
                                                            funcao Start a part
                                                            ir de 
   40 00000000         ; outro arquivo. No caso startup.s
   41 00000000         
   42 00000000         ; Se chamar alguma funcao externa 
   43 00000000         ;IMPORT <func>              ; Permite chamar dentro dest
                       e arquivo uma 
   44 00000000         ; funcao <func>
   45 00000000                 IMPORT           PLL_Init
   46 00000000                 IMPORT           SysTick_Init
   47 00000000                 IMPORT           SysTick_Wait1ms
   48 00000000                 IMPORT           GPIO_Init
   49 00000000         
   50 00000000                 IMPORT           lcd_init
   51 00000000                 IMPORT           printArrayInLcd
   52 00000000                 IMPORT           readKeyboard
   53 00000000                 IMPORT           blinkLEDs
   54 00000000                 IMPORT           escrever_caractere_senha
   55 00000000         
   56 00000000         ; ------------------------------------------------------
                       -------------------------
   57 00000000         ; Funcao main()
   58 00000000         Start
   59 00000000 F7FF FFFE       BL               PLL_Init    ;Chama a subrotina 
                                                            para alterar o cloc
                                                            k do microcontrolad
                                                            or para 80MHz
   60 00000004 F7FF FFFE       BL               SysTick_Init ;Chama a subrotina
                                                             para inicializar o
                                                             SysTick
   61 00000008 F7FF FFFE       BL               GPIO_Init
   62 0000000C F7FF FFFE       BL               lcd_init    ;Chama a subrotina 
                                                            que inicializa os G
                                                            PIO
   63 00000010 F000 F8E1       BL               InitilizeVars
   64 00000014         ;-------------------------------------------------------
                       -------------------------
   65 00000014         MainLoop
   66 00000014 499F            LDR              R1, =sysState
   67 00000016 6809            LDR              R1, [R1]
   68 00000018         
   69 00000018 2900            CMP              R1, #0
   70 0000001A BF08            IT               EQ
   71 0000001C F000 F80D       BLEQ             newPword
   72 00000020         
   73 00000020 2901            CMP              R1, #1
   74 00000022 BF08            IT               EQ



ARM Macro Assembler    Page 3 


   75 00000024 F000 F842       BLEQ             closedSafe
   76 00000028         
   77 00000028 2902            CMP              R1, #2
   78 0000002A BF08            IT               EQ
   79 0000002C F000 F898       BLEQ             waitJ0Interrup
   80 00000030         
   81 00000030 2901            CMP              R1, #1
   82 00000032 BF08            IT               EQ
   83 00000034 F000 F89F       BLEQ             waitMasterPword
   84 00000038         
   85 00000038 E7EC            B                MainLoop
   86 0000003A         
   87 0000003A         ;-------------------------------------------------------
                       -------------------------
   88 0000003A         ; Routine for entering a new password and close the safe
                       
   89 0000003A         newPword
   90 0000003A 4897            LDR              R0, =MSG_OPEN
   91 0000003C F04F 011F       MOV              R1, #31
   92 00000040 B500            PUSH{LR}
   93 00000042 F7FF FFFE       BL               printArrayInLcd
   94 00000046 F7FF FFFE       BL               readKeyboard
   95 0000004A F85D EB04       POP{LR}
   96 0000004E         
   97 0000004E 2800            CMP              R0, #NO_BTNS_PRESSED
   98 00000050 BF08            IT               EQ
   99 00000052 E02A            BEQ              newPwordEnd
  100 00000054         
  101 00000054 2F04            CMP              R7, #4      ; i == 4
  102 00000056 BF08            IT               EQ
  103 00000058 E000            BEQ              newPwordHashtag
  104 0000005A E01B            B                newPwordNewInput
  105 0000005C         
  106 0000005C         newPwordHashtag
  107 0000005C 2823            CMP              R0, #0x23   ; R0 == '#'
  108 0000005E BF18            IT               NE
  109 00000060 E023            BNE              newPwordEnd
  110 00000062         
  111 00000062 B500            PUSH{LR}
  112 00000064 F44F 707A       MOV              R0, #1000
  113 00000068 F7FF FFFE       BL               SysTick_Wait1ms
  114 0000006C         
  115 0000006C 488B            LDR              R0, =MSG_CLOSING
  116 0000006E F04F 0111       MOV              R1, #17
  117 00000072 F7FF FFFE       BL               printArrayInLcd
  118 00000076         
  119 00000076 F241 3088       MOV              R0, #5000
  120 0000007A F7FF FFFE       BL               SysTick_Wait1ms
  121 0000007E         
  122 0000007E F04F 0700       MOV              R7, #0      ; i = 0
  123 00000082 F04F 0600       MOV              R6, #0      ; errorCtr = 0
  124 00000086 4983            LDR              R1, =sysState
  125 00000088 F04F 0001       MOV              R0, #1
  126 0000008C 7008            STRB             R0, [R1]
  127 0000008E F85D EB04       POP{LR}
  128 00000092         
  129 00000092 E00A            B                newPwordEnd
  130 00000094         
  131 00000094         newPwordNewInput



ARM Macro Assembler    Page 4 


  132 00000094 4982            LDR              R1, =currPword
  133 00000096 4439            ADD              R1, R1, R7
  134 00000098 7008            STRB             R0, [R1]    ; currPword[i] = R0
                                                            
  135 0000009A F107 0701       ADD              R7, R7, #1  ; i++
  136 0000009E B500            PUSH             {LR}
  137 000000A0 F7FF FFFE       BL               escrever_caractere_senha
  138 000000A4 F85D EB04       POP              {LR}
  139 000000A8 E7FF            B                newPwordEnd
  140 000000AA         
  141 000000AA         newPwordEnd
  142 000000AA 4770            BX               LR
  143 000000AC         
  144 000000AC         ;-------------------------------------------------------
                       -------------------------
  145 000000AC         ; Routine for when the safe is closed: either opens or l
                       ocks permanently
  146 000000AC         closedSafe
  147 000000AC 487D            LDR              R0, =MSG_CLOSED
  148 000000AE F04F 010D       MOV              R1, #13
  149 000000B2 B500            PUSH{LR}
  150 000000B4 F7FF FFFE       BL               printArrayInLcd
  151 000000B8 F7FF FFFE       BL               readKeyboard
  152 000000BC F85D EB04       POP{LR}
  153 000000C0         
  154 000000C0 2800            CMP              R0, #NO_BTNS_PRESSED
  155 000000C2 BF08            IT               EQ
  156 000000C4 E04B            BEQ              closedSafeEnd
  157 000000C6         
  158 000000C6 2F04            CMP              R7, #4      ; i == 4
  159 000000C8 BF08            IT               EQ
  160 000000CA E000            BEQ              closedSafeHashtag
  161 000000CC E041            B                closedSafeNewInput
  162 000000CE         
  163 000000CE         closedSafeHashtag
  164 000000CE 2823            CMP              R0, #0x23   ; R0 == '#'
  165 000000D0 BF18            IT               NE
  166 000000D2 E044            BNE              closedSafeEnd
  167 000000D4         
  168 000000D4 4872            LDR              R0, =currPword
  169 000000D6 4974            LDR              R1, =guessPword
  170 000000D8 F04F 0204       MOV              R2, #4
  171 000000DC B500            PUSH{LR}
  172 000000DE F000 F889       BL               arraysCmp
  173 000000E2 F85D EB04       POP{LR}
  174 000000E6         
  175 000000E6 2801            CMP              R0, #1
  176 000000E8 BF1A            ITTE             NE
  177 000000EA 2700            MOVNE            R7, #0      ; i = 0
  178 000000EC 1C76            ADDNE            R6, R6, #1  ; errorCtr++
  179 000000EE E003            BEQ              closedSafeOpenSafe
  180 000000F0         
  181 000000F0 2E03            CMP              R6, #3      ; errorCtr == 3
  182 000000F2 BF08            IT               EQ
  183 000000F4 E014            BEQ              closedSafeLockSafe
  184 000000F6         
  185 000000F6 E032            B                closedSafeEnd
  186 000000F8         
  187 000000F8         closedSafeOpenSafe



ARM Macro Assembler    Page 5 


  188 000000F8 B500            PUSH{LR}
  189 000000FA 486C            LDR              R0, =MSG_OPENING
  190 000000FC F04F 0110       MOV              R1, #16
  191 00000100 F7FF FFFE       BL               printArrayInLcd
  192 00000104         
  193 00000104 F241 3088       MOV              R0, #5000
  194 00000108 F7FF FFFE       BL               SysTick_Wait1ms
  195 0000010C         
  196 0000010C F04F 0700       MOV              R7, #0      ; i = 0
  197 00000110 F04F 0600       MOV              R6, #0      ; errorCtr = 0
  198 00000114 495F            LDR              R1, =sysState
  199 00000116 F04F 0000       MOV              R0, #0
  200 0000011A 7008            STRB             R0, [R1]
  201 0000011C F85D EB04       POP{LR}
  202 00000120         
  203 00000120         closedSafeLockSafe
  204 00000120 B500            PUSH{LR}
  205 00000122 4863            LDR              R0, =MSG_LOCKED
  206 00000124 F04F 010E       MOV              R1, #14
  207 00000128 F7FF FFFE       BL               printArrayInLcd
  208 0000012C         
  209 0000012C F241 3088       MOV              R0, #5000
  210 00000130 F7FF FFFE       BL               SysTick_Wait1ms
  211 00000134         
  212 00000134 F04F 0700       MOV              R7, #0      ; i = 0
  213 00000138 F04F 0600       MOV              R6, #0      ; errorCtr = 0
  214 0000013C F04F 0300       MOV              R3, #0
  215 00000140 4959            LDR              R1, =guessPword
  216 00000142 600B            STR              R3, [R1]
  217 00000144 4953            LDR              R1, =sysState
  218 00000146 F04F 0002       MOV              R0, #2
  219 0000014A 7008            STRB             R0, [R1]
  220 0000014C F85D EB04       POP{LR}
  221 00000150         
  222 00000150 E005            B                closedSafeEnd
  223 00000152         
  224 00000152         closedSafeNewInput
  225 00000152 4955            LDR              R1, =guessPword
  226 00000154 4439            ADD              R1, R1, R7
  227 00000156 7008            STRB             R0, [R1]    ; guessPword[i] = R
                                                            0
  228 00000158 F107 0701       ADD              R7, R7, #1  ; i++
  229 0000015C         
  230 0000015C E7FF            B                closedSafeEnd
  231 0000015E         
  232 0000015E         closedSafeEnd
  233 0000015E 4770            BX               LR
  234 00000160         
  235 00000160         ;-------------------------------------------------------
                       -------------------------
  236 00000160         ; Routine that waits for a interruption and disables all
                        other funcions
  237 00000160         waitJ0Interrup
  238 00000160 4853            LDR              R0, =MSG_LOCKED
  239 00000162 F04F 010E       MOV              R1, #14
  240 00000166 B500            PUSH{LR}
  241 00000168 F7FF FFFE       BL               printArrayInLcd
  242 0000016C F000 F858       BL               Atualiza_LEDs
  243 00000170 F85D EB04       POP{LR}



ARM Macro Assembler    Page 6 


  244 00000174         
  245 00000174 4770            BX               LR
  246 00000176         
  247 00000176         ;-------------------------------------------------------
                       -------------------------
  248 00000176         ; Routine to check if the master password was correctly 
                       written
  249 00000176         waitMasterPword
  250 00000176 484E            LDR              R0, =MSG_LOCKED
  251 00000178 F04F 010E       MOV              R1, #14
  252 0000017C B500            PUSH{LR}
  253 0000017E F7FF FFFE       BL               printArrayInLcd
  254 00000182 F7FF FFFE       BL               readKeyboard
  255 00000186 F85D EB04       POP{LR}
  256 0000018A         
  257 0000018A 2800            CMP              R0, #NO_BTNS_PRESSED
  258 0000018C BF08            IT               EQ
  259 0000018E E021            BEQ              waitMasterPwordEnd
  260 00000190         
  261 00000190 2F04            CMP              R7, #4      ; i == 4
  262 00000192 BF08            IT               EQ
  263 00000194 E000            BEQ              waitMasterPwordHashtag
  264 00000196 E017            B                waitMasterPwordNewInput
  265 00000198         
  266 00000198         waitMasterPwordHashtag
  267 00000198 2823            CMP              R0, #0x23   ; R0 == '#'
  268 0000019A BF18            IT               NE
  269 0000019C E01A            BNE              waitMasterPwordEnd
  270 0000019E         
  271 0000019E 4847            LDR              R0, =masterPword
  272 000001A0 4941            LDR              R1, =guessPword
  273 000001A2 F04F 0204       MOV              R2, #4
  274 000001A6 B500            PUSH{LR}
  275 000001A8 F000 F824       BL               arraysCmp
  276 000001AC F85D EB04       POP{LR}
  277 000001B0         
  278 000001B0 2801            CMP              R0, #1
  279 000001B2 BF14            ITE              NE
  280 000001B4 2700            MOVNE            R7, #0      ; i = 0
  281 000001B6 E000            BEQ              waitMasterPwordOpenSafe
  282 000001B8         
  283 000001B8 E00C            B                waitMasterPwordEnd
  284 000001BA         
  285 000001BA         waitMasterPwordOpenSafe
  286 000001BA F04F 0700       MOV              R7, #0      ; i = 0
  287 000001BE 4935            LDR              R1, =sysState
  288 000001C0 F04F 0000       MOV              R0, #0
  289 000001C4 7008            STRB             R0, [R1]
  290 000001C6         
  291 000001C6 E005            B                waitMasterPwordEnd
  292 000001C8         
  293 000001C8         waitMasterPwordNewInput
  294 000001C8 4937            LDR              R1, =guessPword
  295 000001CA 4439            ADD              R1, R1, R7
  296 000001CC 7008            STRB             R0, [R1]    ; guessPword[i] = R
                                                            0
  297 000001CE F107 0701       ADD              R7, R7, #1  ; i++
  298 000001D2         
  299 000001D2 E7FF            B                waitMasterPwordEnd



ARM Macro Assembler    Page 7 


  300 000001D4         
  301 000001D4         waitMasterPwordEnd
  302 000001D4 4770            BX               LR
  303 000001D6         
  304 000001D6         ;-------------------------------------------------------
                       -------------------------
  305 000001D6         ; Initializes variables before the main loop
  306 000001D6         InitilizeVars
  307 000001D6 4939            LDR              R1, =masterPword
  308 000001D8 F44F 7241       MOV              R2, #0x0304
  309 000001DC F2C0 1202       MOVT             R2, #0x0102
  310 000001E0 600A            STR              R2, [R1]
  311 000001E2         
  312 000001E2 F04F 0700       MOV              R7, #0      ; Iterator for pass
                                                            words
  313 000001E6 F04F 0800       MOV              R8, #0      ; Iterator for LCD
  314 000001EA F04F 0932       MOV              R9, #50
  315 000001EE F04F 0501       MOV              R5, #1      ; blinkLeds input(O
                                                            N/OFF)
  316 000001F2         
  317 000001F2         
  318 000001F2 4770            BX               LR
  319 000001F4         
  320 000001F4         ;-------------------------------------------------------
                       -------------------------
  321 000001F4         ; Verifies if two arrays are equal
  322 000001F4         ; Input:  R0 = array1 starting address
  323 000001F4         ;         R1 = array2 starting address
  324 000001F4         ;    R2 = array size
  325 000001F4         ; Output: R0 = 1 if the arrays are equal, 0 if not
  326 000001F4         arraysCmp
  327 000001F4 2A00            CMP              R2, #0
  328 000001F6 BF04            ITT              EQ
  329 000001F8 2001            MOVEQ            R0, #1
  330 000001FA E009            BEQ              arraysCmpEnd
  331 000001FC         
  332 000001FC F810 3B01       LDRB             R3, [R0], #1
  333 00000200 F811 4B01       LDRB             R4, [R1], #1
  334 00000204 42A3            CMP              R3, R4
  335 00000206 BF1C            ITT              NE
  336 00000208 2000            MOVNE            R0, #0
  337 0000020A E001            BNE              arraysCmpEnd
  338 0000020C         
  339 0000020C 1E52            SUBS             R2, R2, #1
  340 0000020E E7F1            B                arraysCmp
  341 00000210         
  342 00000210         arraysCmpEnd
  343 00000210 4770            BX               LR
  344 00000212         
  345 00000212         ;-------------------------------------------------------
                       -------------------------
  346 00000212         ; Verifies if the interruption should change state
  347 00000212         checkJ0Interrup
  348 00000212 4820            LDR              R0, =sysState
  349 00000214 7801            LDRB             R1, [R0]
  350 00000216 2902            CMP              R1, #2
  351 00000218 BF04            ITT              EQ
  352 0000021A 2103            MOVEQ            R1, #3
  353 0000021C 7001            STRBEQ           R1, [R0]



ARM Macro Assembler    Page 8 


  354 0000021E         
  355 0000021E 4770            BX               LR
  356 00000220         
  357 00000220         Atualiza_LEDs
  358 00000220 B500            PUSH             { LR }
  359 00000222 F7FF FFFE       BL               blinkLEDs
  360 00000226 F85D EB04       POP              { LR }
  361 0000022A F1A9 0901       SUB              R9, #1
  362 0000022E F1B9 0F00       CMP              R9, #0
  363 00000232 D109            BNE              Atualiza_LEDsEnd
  364 00000234 F04F 0932       MOV              R9, #50
  365 00000238 F84D 8D04       PUSH             { R8 }
  366 0000023C F04F 38FF       MOV              R8, #-1
  367 00000240 FB05 F508       MUL              R5,R8
  368 00000244 F85D 8B04       POP              { R8 }
  369 00000248         
  370 00000248         Atualiza_LEDsEnd
  371 00000248 4770            BX               LR
  372 0000024A         ; ------------------------------------------------------
                       --------------------------------------------------------
                       -----------
  373 0000024A         ; Fim do Arquivo
  374 0000024A         ; ------------------------------------------------------
                       --------------------------------------------------------
                       ----------- 
  375 0000024A         
  376 0000024A 43 6F 66 
              72 65 20 
              41 62 65 
              72 74 6F 
              00       MSG_OPEN
                               DCB              "Cofre Aberto", 0
  377 00000257 43 6F 66 
              72 65 20 
              41 62 72 
              69 6E 64 
              6F 00    MSG_OPENING
                               DCB              "Cofre Abrindo", 0
  378 00000265 43 6F 66 
              72 65 20 
              46 65 63 
              68 61 6E 
              64 6F 00 MSG_CLOSING
                               DCB              "Cofre Fechando", 0
  379 00000274 43 6F 66 
              72 65 20 
              46 65 63 
              68 61 64 
              6F 2E 00 MSG_CLOSED
                               DCB              "Cofre Fechado.", 0
  380 00000283 43 6F 66 
              72 65 20 
              54 72 61 
              76 61 64 
              6F 2E 00 MSG_LOCKED
                               DCB              "Cofre Travado.", 0
  381 00000292 00 00           ALIGN                        ;Garante que o fim 
                                                            da secao esta alinh
                                                            ada 



ARM Macro Assembler    Page 9 


  382 00000294                 END                          ;Fim do arquivo
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931,A1950W --cpu=Cortex-M4.fp.sp 
--depend=.\objects\main.d -o.\objects\main.o -IC:\Users\joaov\AppData\Local\Arm
\Packs\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C129 --predefine="__EVAL SETA 1" -
-predefine="__UVISION_VERSION SETA 538" --predefine="TM4C1294NCPDT SETA 1" --li
st=.\listings\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DATA 00000000

Symbol: DATA
   Definitions
      At line 21 in file main.s
   Uses
      None
Comment: DATA unused
currPword 00000005

Symbol: currPword
   Definitions
      At line 30 in file main.s
   Uses
      At line 132 in file main.s
      At line 168 in file main.s

guessPword 00000009

Symbol: guessPword
   Definitions
      At line 31 in file main.s
   Uses
      At line 169 in file main.s
      At line 215 in file main.s
      At line 225 in file main.s
      At line 272 in file main.s
      At line 294 in file main.s

lcdString 0000000D

Symbol: lcdString
   Definitions
      At line 32 in file main.s
   Uses
      None
Comment: lcdString unused
masterPword 00000001

Symbol: masterPword
   Definitions
      At line 29 in file main.s
   Uses
      At line 271 in file main.s
      At line 307 in file main.s

sysState 00000000

Symbol: sysState
   Definitions
      At line 28 in file main.s
   Uses
      At line 66 in file main.s
      At line 124 in file main.s
      At line 198 in file main.s
      At line 217 in file main.s
      At line 287 in file main.s
      At line 348 in file main.s




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

6 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 36 in file main.s
   Uses
      None
Comment: .text unused
Atualiza_LEDs 00000220

Symbol: Atualiza_LEDs
   Definitions
      At line 357 in file main.s
   Uses
      At line 242 in file main.s
Comment: Atualiza_LEDs used once
Atualiza_LEDsEnd 00000248

Symbol: Atualiza_LEDsEnd
   Definitions
      At line 370 in file main.s
   Uses
      At line 363 in file main.s
Comment: Atualiza_LEDsEnd used once
InitilizeVars 000001D6

Symbol: InitilizeVars
   Definitions
      At line 306 in file main.s
   Uses
      At line 63 in file main.s
Comment: InitilizeVars used once
MSG_CLOSED 00000274

Symbol: MSG_CLOSED
   Definitions
      At line 379 in file main.s
   Uses
      At line 147 in file main.s
Comment: MSG_CLOSED used once
MSG_CLOSING 00000265

Symbol: MSG_CLOSING
   Definitions
      At line 378 in file main.s
   Uses
      At line 115 in file main.s
Comment: MSG_CLOSING used once
MSG_LOCKED 00000283

Symbol: MSG_LOCKED
   Definitions
      At line 380 in file main.s
   Uses
      At line 205 in file main.s
      At line 238 in file main.s
      At line 250 in file main.s

MSG_OPEN 0000024A



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: MSG_OPEN
   Definitions
      At line 376 in file main.s
   Uses
      At line 90 in file main.s
Comment: MSG_OPEN used once
MSG_OPENING 00000257

Symbol: MSG_OPENING
   Definitions
      At line 377 in file main.s
   Uses
      At line 189 in file main.s
Comment: MSG_OPENING used once
MainLoop 00000014

Symbol: MainLoop
   Definitions
      At line 65 in file main.s
   Uses
      At line 85 in file main.s
Comment: MainLoop used once
Start 00000000

Symbol: Start
   Definitions
      At line 58 in file main.s
   Uses
      At line 39 in file main.s
Comment: Start used once
arraysCmp 000001F4

Symbol: arraysCmp
   Definitions
      At line 326 in file main.s
   Uses
      At line 172 in file main.s
      At line 275 in file main.s
      At line 340 in file main.s

arraysCmpEnd 00000210

Symbol: arraysCmpEnd
   Definitions
      At line 342 in file main.s
   Uses
      At line 330 in file main.s
      At line 337 in file main.s

checkJ0Interrup 00000212

Symbol: checkJ0Interrup
   Definitions
      At line 347 in file main.s
   Uses
      None
Comment: checkJ0Interrup unused
closedSafe 000000AC



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols


Symbol: closedSafe
   Definitions
      At line 146 in file main.s
   Uses
      At line 75 in file main.s
Comment: closedSafe used once
closedSafeEnd 0000015E

Symbol: closedSafeEnd
   Definitions
      At line 232 in file main.s
   Uses
      At line 156 in file main.s
      At line 166 in file main.s
      At line 185 in file main.s
      At line 222 in file main.s
      At line 230 in file main.s

closedSafeHashtag 000000CE

Symbol: closedSafeHashtag
   Definitions
      At line 163 in file main.s
   Uses
      At line 160 in file main.s
Comment: closedSafeHashtag used once
closedSafeLockSafe 00000120

Symbol: closedSafeLockSafe
   Definitions
      At line 203 in file main.s
   Uses
      At line 183 in file main.s
Comment: closedSafeLockSafe used once
closedSafeNewInput 00000152

Symbol: closedSafeNewInput
   Definitions
      At line 224 in file main.s
   Uses
      At line 161 in file main.s
Comment: closedSafeNewInput used once
closedSafeOpenSafe 000000F8

Symbol: closedSafeOpenSafe
   Definitions
      At line 187 in file main.s
   Uses
      At line 179 in file main.s
Comment: closedSafeOpenSafe used once
newPword 0000003A

Symbol: newPword
   Definitions
      At line 89 in file main.s
   Uses
      At line 71 in file main.s
Comment: newPword used once



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

newPwordEnd 000000AA

Symbol: newPwordEnd
   Definitions
      At line 141 in file main.s
   Uses
      At line 99 in file main.s
      At line 109 in file main.s
      At line 129 in file main.s
      At line 139 in file main.s

newPwordHashtag 0000005C

Symbol: newPwordHashtag
   Definitions
      At line 106 in file main.s
   Uses
      At line 103 in file main.s
Comment: newPwordHashtag used once
newPwordNewInput 00000094

Symbol: newPwordNewInput
   Definitions
      At line 131 in file main.s
   Uses
      At line 104 in file main.s
Comment: newPwordNewInput used once
waitJ0Interrup 00000160

Symbol: waitJ0Interrup
   Definitions
      At line 237 in file main.s
   Uses
      At line 79 in file main.s
Comment: waitJ0Interrup used once
waitMasterPword 00000176

Symbol: waitMasterPword
   Definitions
      At line 249 in file main.s
   Uses
      At line 83 in file main.s
Comment: waitMasterPword used once
waitMasterPwordEnd 000001D4

Symbol: waitMasterPwordEnd
   Definitions
      At line 301 in file main.s
   Uses
      At line 259 in file main.s
      At line 269 in file main.s
      At line 283 in file main.s
      At line 291 in file main.s
      At line 299 in file main.s

waitMasterPwordHashtag 00000198

Symbol: waitMasterPwordHashtag
   Definitions



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

      At line 266 in file main.s
   Uses
      At line 263 in file main.s
Comment: waitMasterPwordHashtag used once
waitMasterPwordNewInput 000001C8

Symbol: waitMasterPwordNewInput
   Definitions
      At line 293 in file main.s
   Uses
      At line 264 in file main.s
Comment: waitMasterPwordNewInput used once
waitMasterPwordOpenSafe 000001BA

Symbol: waitMasterPwordOpenSafe
   Definitions
      At line 285 in file main.s
   Uses
      At line 281 in file main.s
Comment: waitMasterPwordOpenSafe used once
30 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NO_BTNS_PRESSED 00000000

Symbol: NO_BTNS_PRESSED
   Definitions
      At line 18 in file main.s
   Uses
      At line 97 in file main.s
      At line 154 in file main.s
      At line 257 in file main.s

1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

GPIO_Init 00000000

Symbol: GPIO_Init
   Definitions
      At line 48 in file main.s
   Uses
      At line 61 in file main.s
Comment: GPIO_Init used once
PLL_Init 00000000

Symbol: PLL_Init
   Definitions
      At line 45 in file main.s
   Uses
      At line 59 in file main.s
Comment: PLL_Init used once
SysTick_Init 00000000

Symbol: SysTick_Init
   Definitions
      At line 46 in file main.s
   Uses
      At line 60 in file main.s
Comment: SysTick_Init used once
SysTick_Wait1ms 00000000

Symbol: SysTick_Wait1ms
   Definitions
      At line 47 in file main.s
   Uses
      At line 113 in file main.s
      At line 120 in file main.s
      At line 194 in file main.s
      At line 210 in file main.s

blinkLEDs 00000000

Symbol: blinkLEDs
   Definitions
      At line 53 in file main.s
   Uses
      At line 359 in file main.s
Comment: blinkLEDs used once
escrever_caractere_senha 00000000

Symbol: escrever_caractere_senha
   Definitions
      At line 54 in file main.s
   Uses
      At line 137 in file main.s
Comment: escrever_caractere_senha used once
lcd_init 00000000

Symbol: lcd_init
   Definitions
      At line 50 in file main.s
   Uses
      At line 62 in file main.s
Comment: lcd_init used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

printArrayInLcd 00000000

Symbol: printArrayInLcd
   Definitions
      At line 51 in file main.s
   Uses
      At line 93 in file main.s
      At line 117 in file main.s
      At line 150 in file main.s
      At line 191 in file main.s
      At line 207 in file main.s
      At line 241 in file main.s
      At line 253 in file main.s

readKeyboard 00000000

Symbol: readKeyboard
   Definitions
      At line 52 in file main.s
   Uses
      At line 94 in file main.s
      At line 151 in file main.s
      At line 254 in file main.s

9 symbols
382 symbols in table
